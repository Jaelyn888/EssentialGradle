package com.yishanxiu.yishang.activity;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.*;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.umeng.socialize.UMShareAPI;
import com.yishanxiu.yishang.R;
import com.yishanxiu.yishang.activity.base.BaseUIActivity;
import com.yishanxiu.yishang.adapter.RelationProductAdapter;
import com.yishanxiu.yishang.getdata.*;
import com.yishanxiu.yishang.utils.*;
import com.yishanxiu.yishang.view.GridViewNoScroll;
import com.yishanxiu.yishang.view.ScalRefreshScrollView;
import com.yishanxiu.yishang.view.ScalRefreshScrollView1;
import net.tsz.afinal.annotation.view.ViewInject;
import net.tsz.afinal.json.JsonMap;
import net.tsz.afinal.json.JsonParseHelper;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Jaelyn on 2015/9/16 0016. 店铺首页
 */
public class ShopActivity1 extends BaseUIActivity {
	/**
	 * 刷新的
	 */
	@ViewInject(id = R.id.ptr_scrollview)
	private ScalRefreshScrollView1 ptr_scrollview;
	@ViewInject(id = R.id.xgv)
	private GridViewNoScroll xgv;

	@ViewInject(id = R.id.scroll_view_head)
	private RelativeLayout scroll_view_head;
	//head view
	@ViewInject(id = R.id.shop_bg_iv)
	private ImageView shop_bg_iv;// 商品图片
	@ViewInject(id = R.id.shop_name_tv)
	private TextView shop_name_tv;//主题
	@ViewInject(id = R.id.shop_discri_tv)
	private TextView shop_discri_tv;//主题描述
	@ViewInject(id = R.id.shop_detail_discri_tv)
	private TextView shop_detail_discri_tv;
	@ViewInject(id = R.id.detail_more, click = "detail_more_click")
	private TextView detail_more_tv;//详情
	@ViewInject(id = R.id.attention_tag_iv, click = "attention_tag_iv_click")
	private TextView attention_tag_iv;// 添加关注

	private List<JsonMap<String, Object>> dataList = new ArrayList<JsonMap<String, Object>>();
	private String shopId = ""; // 店铺的id
	private String shopName = "";// 店铺名字
	private String shopDiscri = "";
	private int nPage = 0;
	/**
	 * 下拉刷新Gridview适配器
	 */
	private RelationProductAdapter relationProductAdapter;
	private JsonMap<String, Object> shopDatas; // 店铺信息
	private String shopStr;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.shoplayout1);
		setBtn_menu(R.drawable.search_white, new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				jumpToSearchProduct();
			}
		},
				R.drawable.share_white, new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				share();
			}
		});
		Intent intent = getIntent();
		if (intent != null) {
			shopStr = intent.getStringExtra(ExtraKeys.Key_Msg1);
			if (TextUtils.isEmpty(shopStr)) {
				shopId = intent.getStringExtra(Constant.ID);
				shopId="1388";
				shopDatas = new JsonMap();
				shopDatas.put("brandId", shopId);
			} else {
				shopDatas = JsonParseHelper.getJsonMap(shopStr);
//				shopName = shopDatas.getStringNoNull("brandName");
//				shopId = shopDatas.getStringNoNull("brandId");
//				shopDiscri = shopDatas.getStringNoNull("pageDesc");
//				setCenter_title(shopName);
//				shop_name_tv.setText(shopName);
//				shop_discri_tv.setText(shopDiscri);
			}

		} else {
			finish();
		}
		//FrameLayout.LayoutParams localObject = new FrameLayout.LayoutParams(DisplayUtil.screenWidth, (int) (10.5F * (DisplayUtil.screenWidth / 16.0F)));
		//scroll_view_head.setLayoutParams(localObject);
		ptr_scrollview.initCompont(mContext);
		LinearLayout.LayoutParams localObject = new LinearLayout.LayoutParams(DisplayUtil.screenWidth, (int) (10.5F * (DisplayUtil.screenWidth / 16.0F)));
		ptr_scrollview.getmZoomHeaderContainer().setLayoutParams(localObject);
		initHead();
		initHeadView();
		getServerData();

	}

	private void initHead() {
		String backImge = shopDatas.getStringNoNull("picPath"); // 背景大图
		BitmapHelper.loadImage(mContext, backImge, shop_bg_iv, BitmapHelper.LoadImgOption.Rectangle);
		shopName = shopDatas.getStringNoNull("brandName");
		shopId = shopDatas.getStringNoNull("brandId");
		shopDiscri = shopDatas.getStringNoNull("pageDesc");
		setCenter_title(shopName);
		shop_name_tv.setText(shopName);
		shop_discri_tv.setText(shopDiscri);

		shop_detail_discri_tv.setText(shopDatas.getStringNoNull("detailedDesc"));

	}

	/**
	 * 拉取店铺信息
	 */
	private void getServerData() {
		loadingToast.show();
		Map<String, Object> params = new HashMap<String, Object>();
		if (Utils.isHasLogin(this)) {
			params.put("userId", Utils.getUserId(this));
		}
		params.put("brandId", shopId);
		params.put("pageIndex", String.valueOf(nPage + 1));
		GetDataQueue queue = new GetDataQueue();
		queue.setActionName(GetDataConfing.GetAction_GetVendorDetails);
		queue.setParamsNoJson(params);
		queue.setCallBack(callBack);
		queue.setWhat(GetDataConfing.What_GetVendorDetails);
		getDataUtil.getData(queue);
	}


	/**
	 * 详情显示
	 */
	public void detail_more_click(View view) {
		Intent intent = new Intent(mContext, ShopIntroductionActivity.class);
		intent.putExtra(ExtraKeys.Key_Msg1, shopStr);
		jumpTo(intent);
	}

	/**
	 * 关注按钮点击
	 */
	public void attention_tag_iv_click(View view) {
		getDate_GetFocusOn(callBack, shopId, Constant.CollectionType.Brand, this);
	}

	/**
	 * 添加头部
	 */
	private void initHeadView() {
		relationProductAdapter = new RelationProductAdapter(this);
		relationProductAdapter.setShowDiscri(true);
		relationProductAdapter.setDatas(dataList);
		xgv.setAdapter(relationProductAdapter);
		xgv.setOnItemClickListener(onItemClickListener);
		//ptr_scrollview.setHeader(shop_bg_iv);
		ptr_scrollview.setMode(PullToRefreshBase.Mode.PULL_FROM_END);
		//ptr_scrollview.setOnTurnListener(this);
		ptr_scrollview.setOnRefreshListener(loadMoreListener);
	}

	/**
	 * 刷洗监听
	 */
	private ScalRefreshScrollView.OnRefreshListener2<ScrollView> loadMoreListener = new ScalRefreshScrollView.OnRefreshListener2<ScrollView>() {
		@Override
		public void onPullDownToRefresh(PullToRefreshBase<ScrollView> refreshView) {
			ptr_scrollview.onRefreshComplete();
		}

		@Override
		public void onPullUpToRefresh(PullToRefreshBase<ScrollView> refreshView) {
			getRelationGoods();
		}
	};

	/*private PullToRefreshScrollView.OnRefreshListener2<ScrollView> loadMoreListener = new PullToRefreshScrollView.OnRefreshListener2<ScrollView>() {
		@Override
		public void onPullDownToRefresh(PullToRefreshBase<ScrollView> refreshView) {
			ptr_scrollview.onRefreshComplete();
		}

		@Override
		public void onPullUpToRefresh(PullToRefreshBase<ScrollView> refreshView) {
			getRelationGoods();
		}
	};*/

	/**
	 * item的点击
	 */
	AdapterView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
			JsonMap<String, Object> jsonmap = dataList.get(position);
			String goodsId = jsonmap.getStringNoNull("productId");
			String brandName = jsonmap.getStringNoNull("brandName");
			seeProductDetail(goodsId, brandName);

		}
	};

	/**
	 * 获取商品 {shopId:165,typeId:2,nPage:1}
	 */
	private void getRelationGoods() {
		// xgv.setBoolInterceptTouchEvent(true);
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("brandId", shopId);
		params.put("pageIndex", String.valueOf(nPage + 1));
		GetDataQueue queue = new GetDataQueue();
		queue.setActionName(GetDataConfing.GetAction_SelectVendorProductList);
		queue.setParamsNoJson(params);
		queue.setCallBack(callBack);
		queue.setWhat(GetDataConfing.What_SelectVendorProductList);
		getDataUtil.getData(queue);
	}

	private IGetServicesDataCallBack callBack = new IGetServicesDataCallBack() {
		@Override
		public void onLoaded(GetDataQueue entity) {
			ptr_scrollview.onRefreshComplete();
			if (entity.isOk()) {
				if (ShowGetDataError.isCodeSuccess(mContext, entity.getInfo())) {
					if (entity.what == GetDataConfing.What_SelectVendorProductList) {

						JsonMap<String, Object> data = JsonParseHelper.getJsonMap_JsonMap(entity.getInfo(), JsonKeys.Key_Info);
						List<JsonMap<String, Object>> productList = data.getList_JsonMap("productList");
						setData(productList);
						validateData(productList);
					} else if (entity.what == GetDataConfing.What_GetVendorDetails) {
						try {
							JsonMap<String, Object> data = JsonParseHelper.getJsonMap_JsonMap(entity.getInfo(), JsonKeys.Key_Info);
							shopStr = data.getString("brand");
							shopDatas = data.getJsonMap("brand");
							boolean isFocus = data.getBoolean("collectionFlag");
							changeAttendStatue(isFocus);
							List<JsonMap<String, Object>> productList = data.getList_JsonMap("productList");
							refreshShopDetail(productList);
						} catch (Exception e) {
							e.printStackTrace();
							toast.showToast(R.string.server_error);
						}
					} else if (entity.what == GetDataConfing.WHAT_GET_FOCUS_ON) { // 关注平拍
						try {
							JsonMap<String, Object> data = JsonParseHelper.getJsonMap_JsonMap(entity.getInfo(), JsonKeys.Key_Info);
							changeAttendStatue(data.getBoolean("isCollected"));
							sendBroadcast(new Intent(Constant.ACT_BRAND_COLLECTION_CHANGE));
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			} else {
				ShowGetDataError.showNetError(mContext);
			}
			loadingToast.dismiss();
		}

	};

	/**
	 * 设置商品信息 并请求相关商品的信息
	 *
	 * @param productList
	 */
	private void refreshShopDetail(List<JsonMap<String, Object>> productList) {
		initHead();
		if (productList.size() > 0) {
			setData(productList);
		}
		validateData(productList);
	}

	/**
	 * 更改关注状态
	 *
	 * @param isFocus
	 */
	private void changeAttendStatue(boolean isFocus) {
		attention_tag_iv.setSelected(isFocus);
		if (isFocus) {
			attention_tag_iv.setText(R.string.attentioned);
		} else {
			attention_tag_iv.setText(R.string.noattention);
		}
	}

	private void setData(List<JsonMap<String, Object>> data_server) {
		if (data_server.size() != 0) {
			dataList.addAll(data_server);

			relationProductAdapter.setDatas(dataList);
			//xgv.setAdapter(relationProductAdapter);
			relationProductAdapter.notifyDataSetChanged();
			//ptr_scrollview.notifyAll();
			nPage++;
		}
	}


	/**
	 * 校验数据 显示无数据等
	 *
	 * @param data_server
	 */
	private void validateData(List<JsonMap<String, Object>> data_server) {
		if (data_server.size() < 10) {
			ptr_scrollview.setMode(PullToRefreshBase.Mode.DISABLED);
		} else {
			ptr_scrollview.setMode(PullToRefreshBase.Mode.DISABLED);
		}
		//setListViewHeightBasedOnChildren(xgv);
	}

	private void share() {
		String shareLogo = shopDatas.getStringNoNull("logoPath");
		String shareTitle = shopDatas.getStringNoNull("brandName");
		String shareContent = shopDatas.getStringNoNull("pageDesc");
		String shareUrl = "pages/mobile_page/brand_introduction.html?brandId=" + shopId;
		ShareSocialUtils.showShareCompont(mContext, shareLogo, shareUrl, shareTitle, shareContent);
	}


	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		/** 使用SSO授权必须添加如下代码 */
		UMShareAPI.get(this).onActivityResult(requestCode, resultCode, data);
	}

}