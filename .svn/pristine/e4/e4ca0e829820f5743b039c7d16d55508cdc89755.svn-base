package com.yishanxiu.yishang.activity;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.*;
import com.google.gson.reflect.TypeToken;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshScrollView;
import com.umeng.socialize.UMShareAPI;
import com.yishanxiu.yishang.R;
import com.yishanxiu.yishang.activity.base.BaseUIActivity;
import com.yishanxiu.yishang.adapter.RelationProductAdapter2;
import com.yishanxiu.yishang.getdata.*;
import com.yishanxiu.yishang.model.*;
import com.yishanxiu.yishang.model.shopmall.BrandModel;
import com.yishanxiu.yishang.model.shopmall.BrandSortModel;
import com.yishanxiu.yishang.model.user.CollectionResponse;
import com.yishanxiu.yishang.model.shopmall.ProductInfoModel;
import com.yishanxiu.yishang.model.shopmall.ShopDetailResponse;
import com.yishanxiu.yishang.utils.*;
import com.yishanxiu.yishang.view.GridViewNoScroll;
import net.tsz.afinal.annotation.view.ViewInject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Jaelyn on 2015/9/16 0016. 店铺首页
 */
public class ShopActivity2 extends BaseUIActivity {
	/**
	 * 刷新的
	 */
	@ViewInject(id = R.id.ptr_scrollview)
	private PullToRefreshScrollView ptr_scrollview;
	@ViewInject(id = R.id.xgv)
	private GridViewNoScroll xgv;

	@ViewInject(id = R.id.scroll_view_head)
	private RelativeLayout scroll_view_head;
	//head view
	@ViewInject(id = R.id.shop_bg_iv)
	private ImageView shop_bg_iv;// 商品图片
	@ViewInject(id = R.id.shop_name_tv)
	private TextView shop_name_tv;//主题
	@ViewInject(id = R.id.shop_discri_tv)
	private TextView shop_discri_tv;//主题描述
	@ViewInject(id = R.id.shop_detail_discri_tv)
	private TextView shop_detail_discri_tv;
	@ViewInject(id = R.id.detail_more, click = "detail_more_click")
	private TextView detail_more_tv;//详情
	@ViewInject(id = R.id.attention_tag_iv, click = "attention_tag_iv_click")
	private TextView attention_tag_iv;// 添加关注

	private List<ProductInfoModel> dataList = new ArrayList<ProductInfoModel>();

	private int nPage = 0;
	/**
	 * 下拉刷新Gridview适配器
	 */
	private RelationProductAdapter2 relationProductAdapter;
	private BrandModel shopDatas; // 店铺信息


	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.shoplayout);
		setBtn_menu(R.drawable.search_white, new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				jumpToSearchProduct();
			}
		}, R.drawable.share_white, new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				share();
			}
		});
		Intent intent = getIntent();
		if (intent != null) {
			try {
				shopDatas = (BrandModel) intent.getSerializableExtra(ExtraKeys.Key_Msg1);
				if (shopDatas == null) {
					shopDatas = new BrandModel();
					long shopId = intent.getIntExtra(Constant.ID, 0);
					shopDatas.setBrandId("" + shopId);
				}
			} catch (Exception e) {
				e.printStackTrace();
				shopDatas = new BrandModel();
				long shopId = intent.getIntExtra(Constant.ID, 0);
				shopDatas.setBrandId("" + shopId);
			}

		} else {
			finish();
		}
		LinearLayout.LayoutParams localObject = new LinearLayout.LayoutParams(DisplayUtil.screenWidth, (int) (10.5F * (DisplayUtil.screenWidth / 16.0F)));
		scroll_view_head.setLayoutParams(localObject);
		initHead();
		addHeadView();
		getServerData();
	}

	private void initHead() {
		BitmapHelper.loadImage(mContext, shopDatas.getPicPath(), shop_bg_iv, BitmapHelper.LoadImgOption.Rectangle);
		setCenter_title(shopDatas.getBrandName());
		shop_name_tv.setText(shopDatas.getBrandName());
		shop_discri_tv.setText(shopDatas.getPageDesc());
		shop_detail_discri_tv.setText(shopDatas.getDetailedDesc());
	}

	/**
	 * 拉取店铺信息
	 */
	private void getServerData() {
		loadingToast.show();
		Map<String, Object> params = new HashMap<String, Object>();
		if (Utils.isHasLogin(this)) {
			params.put("userId", Utils.getUserId(this));
		}
		params.put("brandId", shopDatas.getBrandId());
		params.put("pageIndex", String.valueOf(nPage + 1));
		GetDataQueue queue = new GetDataQueue();
		queue.setActionName(GetDataConfing.GetAction_GetVendorDetails);
		queue.setParamsNoJson(params);
		queue.setCallBack(callBack);
		queue.setWhat(GetDataConfing.What_GetVendorDetails);
		getDataUtil.getData(queue);
	}


	/**
	 * 详情显示
	 */
	public void detail_more_click(View view) {
		Intent intent = new Intent(mContext, ShopIntroductionActivity.class);
		intent.putExtra(ExtraKeys.Key_Msg1, shopDatas);
		jumpTo(intent);
	}

	/**
	 * 关注按钮点击
	 */
	public void attention_tag_iv_click(View view) {
		getDate_GetFocusOn(callBack, shopDatas.getBrandId(), Constant.CollectionType.Brand, this);
	}

	/**
	 * 添加头部
	 */
	private void addHeadView() {
		relationProductAdapter = new RelationProductAdapter2(this);
		relationProductAdapter.setShowDiscri(true);
		relationProductAdapter.setData(dataList);
		xgv.setAdapter(relationProductAdapter);
		xgv.setOnItemClickListener(onItemClickListener);
		//ptr_scrollview.setHeader(shop_bg_iv);
		ptr_scrollview.setMode(PullToRefreshBase.Mode.PULL_FROM_END);
		//ptr_scrollview.setOnTurnListener(this);
		ptr_scrollview.setOnRefreshListener(loadMoreListener);
	}

	/**
	 * 刷洗监听
	 */
	private PullToRefreshScrollView.OnRefreshListener2<ScrollView> loadMoreListener = new PullToRefreshScrollView.OnRefreshListener2<ScrollView>() {
		@Override
		public void onPullDownToRefresh(PullToRefreshBase<ScrollView> refreshView) {
			ptr_scrollview.onRefreshComplete();
		}

		@Override
		public void onPullUpToRefresh(PullToRefreshBase<ScrollView> refreshView) {
			getRelationGoods();
		}
	};

	/**
	 * item的点击
	 */
	AdapterView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
			ProductInfoModel productInfoModel = dataList.get(position);
			seeProductDetail(productInfoModel);

		}
	};

	/**
	 * 获取商品 {shopId:165,typeId:2,nPage:1}
	 */
	private void getRelationGoods() {
		Map<String, Object> params = new HashMap<>();
		params.put("brandId", shopDatas.getBrandId());
		params.put("pageIndex", String.valueOf(nPage + 1));
		GetDataQueue queue = new GetDataQueue();
		queue.setActionName(GetDataConfing.GetAction_SelectVendorProductList);
		queue.setParamsNoJson(params);
		queue.setCallBack(callBack);
		queue.setWhat(GetDataConfing.What_SelectVendorProductList);
		getDataUtil.getData(queue);
	}

	private IGetServicesDataCallBack callBack = new IGetServicesDataCallBack() {
		@Override
		public void onLoaded(GetDataQueue entity) {
			loadingToast.dismiss();
			if (entity.what == GetDataConfing.What_SelectVendorProductList) {
				ptr_scrollview.onRefreshComplete();
				TypeToken<BaseResponse<ShopDetailResponse>> typeToken = new TypeToken<BaseResponse<ShopDetailResponse>>(){};
				BaseResponse<ShopDetailResponse> baseResponse = new ModleUtils().mapTo(entity, typeToken);
				if (ShowGetDataError.isCodeSuccess(mContext, baseResponse)) {
					List<ProductInfoModel> productList = baseResponse.getInfo().getProductList();
					setData(productList);
					validateData(productList);
				}
			} else if (entity.what == GetDataConfing.What_GetVendorDetails) {
				try {
					TypeToken<BaseResponse<ShopDetailResponse>> typeToken = new TypeToken<BaseResponse<ShopDetailResponse>>(){};
					BaseResponse<ShopDetailResponse> baseResponse = new ModleUtils().mapTo(entity, typeToken);
					if (ShowGetDataError.isCodeSuccess(mContext, baseResponse)) {
						shopDatas = baseResponse.getInfo().getBrand();
						int isFocus = baseResponse.getInfo().getCollectionFlag();
						changeAttendStatue(isFocus);
						List<ProductInfoModel> productList = baseResponse.getInfo().getProductList();
						refreshShopDetail(productList);
					}

				} catch (Exception e) {
					e.printStackTrace();
					toast.showToast(R.string.server_error);
				}
			} else if (entity.what == GetDataConfing.WHAT_GET_FOCUS_ON) { // 关注平拍
				TypeToken<BaseResponse<CollectionResponse>> typeToken = new TypeToken<BaseResponse<CollectionResponse>>(){};
				BaseResponse<CollectionResponse> baseResponse = new ModleUtils().mapTo(entity, typeToken);
				if (ShowGetDataError.isCodeSuccess(mContext, baseResponse)) {
					int isCollected=baseResponse.getInfo().isCollected();
					changeAttendStatue(isCollected);
					sendBroadcast(new Intent(Constant.ACT_BRAND_COLLECTION_CHANGE));
				}
			}


		}

	};

	/**
	 * 设置商品信息 并请求相关商品的信息
	 *
	 * @param productList
	 */
	private void refreshShopDetail(List<ProductInfoModel> productList) {
		initHead();
		if (productList.size() > 0) {
			setData(productList);
		}
		validateData(productList);
	}

	/**
	 * 更改关注状态
	 *
	 * @param isFocus
	 */
	private void changeAttendStatue(int isFocus) {
		boolean isFocusBoolean=isFocus>0?true:false;
		attention_tag_iv.setSelected(isFocusBoolean);
		if (isFocusBoolean) {
			attention_tag_iv.setText(R.string.attentioned);
		} else {
			attention_tag_iv.setText(R.string.noattention);
		}
	}

	private void setData(List<ProductInfoModel> data_server) {
		if (data_server.size() != 0) {
			dataList.addAll(data_server);

			relationProductAdapter.setData(dataList);
			//xgv.setAdapter(relationProductAdapter);
			relationProductAdapter.notifyDataSetChanged();
			//ptr_scrollview.notifyAll();
			nPage++;
		} else {
			ptr_scrollview.setMode(PullToRefreshBase.Mode.DISABLED);
		}
	}


	/**
	 * 校验数据 显示无数据等
	 *
	 * @param data_server
	 */
	private void validateData(List<ProductInfoModel> data_server) {
		if (data_server.size() < 10) {
			ptr_scrollview.setMode(PullToRefreshBase.Mode.DISABLED);
		} else {
			ptr_scrollview.setMode(PullToRefreshBase.Mode.PULL_FROM_END);
		}
		//setListViewHeightBasedOnChildren(xgv);
	}

	private void share() {
		String shareLogo = shopDatas.getLogoPath();
		String shareTitle = shopDatas.getBrandName();
		String shareContent = shopDatas.getPageDesc();
		String shareUrl = "pages/mobile_page/brand_introduction.html?brandId=" + shopDatas.getBrandId();
		ShareSocialUtils.showShareCompont(mContext, shareLogo, shareUrl, shareTitle, shareContent);
	}


	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		/** 使用SSO授权必须添加如下代码 */
		UMShareAPI.get(this).onActivityResult(requestCode, resultCode, data);
	}

}