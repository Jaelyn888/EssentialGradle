package com.yishanxiu.yishang.view;



import android.content.Context;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.Toast;
import com.ecloud.pulltozoomview.PullToZoomLayoutEx;
import com.handmark.pulltorefresh.library.PullToRefreshScrollView;

/**
 * scroll顶部带图片的可拉伸 初始化然后setImageView
 * <p/>
 * Created by Jaelyn on 16/3/12.
 */
public class ScalRefreshScrollView1 extends PullToRefreshScrollView {
	private PullToZoomLayoutEx zoomLayoutEx;
	 private View zoomHeaderView;
	private FrameLayout mZoomHeaderContainer;
	private LinearLayout mZoomRootContainer;
	private View mZoomContentView;

	public ScalRefreshScrollView1(Context context) {
		super(context);
	}

	public ScalRefreshScrollView1(Context context, AttributeSet attrs) {
		super(context, attrs);
	}

	public ScalRefreshScrollView1(Context context, Mode mode) {
		super(context, mode);

	}

	public ScalRefreshScrollView1(Context context, Mode mode, AnimationStyle style) {
		super(context, mode, style);
	}


	@Override
	public  boolean onInterceptTouchEvent(MotionEvent event) {
		return super.onInterceptTouchEvent(event);
//		if (!isPullToRefreshEnabled()) {
//			return false;
//		}


//		final int action = event.getAction();
//		if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
//			mIsBeingDragged = false;
//			return false;
//		}
//
//		if (action != MotionEvent.ACTION_DOWN && mIsBeingDragged) {
//			return true;
//		}
//
//		switch (action) {
//			case MotionEvent.ACTION_MOVE: {
//				// If we're refreshing, and the flag is set. Eat all MOVE events
//				if (!mScrollingWhileRefreshingEnabled && isRefreshing()) {
//					return true;
//				}
//
//				if (isReadyForPullStart()) {
//					final float y = event.getY(), x = event.getX();
//					final float diff, oppositeDiff, absDiff;
//
//					// We need to use the correct values, based on scroll
//					// direction
//					diff = y - mLastMotionY;
//					oppositeDiff = x - mLastMotionX;
//					absDiff = Math.abs(diff);
//
//					if (absDiff > mTouchSlop && absDiff > Math.abs(oppositeDiff)) {
//						if (diff >= 1f && isReadyForPullStart()) {
//							mLastMotionY = y;
//							mLastMotionX = x;
//							mIsBeingDragged = true;
//						}
//					}
//				}
//
//
//				if (isReadyForPull()) {
//					final float y = event.getY(), x = event.getX();
//					final float diff, oppositeDiff, absDiff;
//
//					// We need to use the correct values, based on scroll
//					// direction
//					switch (getPullToRefreshScrollDirection()) {
//						case HORIZONTAL:
//							diff = x - mLastMotionX;
//							oppositeDiff = y - mLastMotionY;
//							break;
//						case VERTICAL:
//						default:
//							diff = y - mLastMotionY;
//							oppositeDiff = x - mLastMotionX;
//							break;
//					}
//					absDiff = Math.abs(diff);
//
//					if (absDiff > mTouchSlop && (!mFilterTouchEvents || absDiff > Math.abs(oppositeDiff))) {
//						if (mMode.showHeaderLoadingLayout() && diff >= 1f && isReadyForPullStart()) {
//							mLastMotionY = y;
//							mLastMotionX = x;
//							mIsBeingDragged = true;
//							if (mMode == Mode.BOTH) {
//								mCurrentMode = Mode.PULL_FROM_START;
//							}
//						} else if (mMode.showFooterLoadingLayout() && diff <= -1f && isReadyForPullEnd()) {
//							mLastMotionY = y;
//							mLastMotionX = x;
//							mIsBeingDragged = true;
//							if (mMode == Mode.BOTH) {
//								mCurrentMode = Mode.PULL_FROM_END;
//							}
//						}
//					}
//				}
//				break;
//			}
//			case MotionEvent.ACTION_DOWN: {
//				if (isReadyForPullStart()) {
//					mLastMotionY = mInitialMotionY = event.getY();
//					mLastMotionX = mInitialMotionX = event.getX();
//					mIsBeingDragged = false;
//				}
//				if (isReadyForPull()) {
//					mLastMotionY = mInitialMotionY = event.getY();
//					mLastMotionX = mInitialMotionX = event.getX();
//					mIsBeingDragged = false;
//				}
//				break;
//			}
//		}
//
//		return mIsBeingDragged;
	}


	@Override
	public  boolean onTouchEvent(MotionEvent event) {
//		if (!isPullToRefreshEnabled()) {
//			return false;
//		}
//
//		// If we're refreshing, and the flag is set. Eat the event
//		if (!mScrollingWhileRefreshingEnabled && isRefreshing()) {
//			return true;
//		}
//
//		if (event.getAction() == MotionEvent.ACTION_DOWN && event.getEdgeFlags() != 0) {
//			return false;
//		}
//
//		switch (event.getAction()) {
//			case MotionEvent.ACTION_MOVE: {
//				if (mIsBeingDragged) {
//					mLastMotionY = event.getY();
//					mLastMotionX = event.getX();
//					zoomLayoutEx.pullEvent();
//					zoomLayoutEx.setZooming(true);
//					return true;
//				}
//				break;
//			}
//
//			case MotionEvent.ACTION_DOWN: {
//				if (isReadyForPullStart()) {
//					mLastMotionY = mInitialMotionY = event.getY();
//					mLastMotionX = mInitialMotionX = event.getX();
//					return true;
//				}
//				if (isReadyForPull()) {
//					mLastMotionY = mInitialMotionY = event.getY();
//					mLastMotionX = mInitialMotionX = event.getX();
//					return true;
//				}
//				break;
//			}
//
//			case MotionEvent.ACTION_CANCEL:
//			case MotionEvent.ACTION_UP: {
//
//					// If we're already refreshing, just scroll back to the top
//
//
//
//				if (mIsBeingDragged) {
//					mIsBeingDragged = false;
//					if (zoomLayoutEx.isZooming()) {
//						zoomLayoutEx.smoothScrollToTop();
//						return true;
//					}
//					if (mState == State.RELEASE_TO_REFRESH
//							&& (null != mOnRefreshListener || null != mOnRefreshListener2)) {
//						setState(State.REFRESHING, true);
//						return true;
//					}
//
//					// If we're already refreshing, just scroll back to the top
//					if (isRefreshing()) {
//						smoothScrollTo(0);
//						return true;
//					}
//
//					// If we haven't returned by here, then we're not in a state
//					// to pull, so just reset
//					setState(State.RESET);
//
//					return true;
//				}
//				break;
//			}
//		}

		return super.onTouchEvent(event);
	}


	public void initCompont(Context context) {
		zoomLayoutEx= (PullToZoomLayoutEx) mRefreshableView.getChildAt(0);
		zoomHeaderView=zoomLayoutEx.getHeaderView();
		mZoomHeaderContainer=zoomLayoutEx.getmHeaderContainer();
		mZoomRootContainer=zoomLayoutEx.getmRootContainer();
		mZoomContentView=zoomLayoutEx.getmContentView();
	}

	public PullToZoomLayoutEx getZoomLayoutEx() {
		return zoomLayoutEx;
	}

	public View getZoomHeaderView() {
		return zoomHeaderView;
	}

	public FrameLayout getmZoomHeaderContainer() {
		return mZoomHeaderContainer;
	}

	public LinearLayout getmZoomRootContainer() {
		return mZoomRootContainer;
	}

	public View getmZoomContentView() {
		return mZoomContentView;
	}

	public void setZoomHeaderLayoutParams(){

	}
}



