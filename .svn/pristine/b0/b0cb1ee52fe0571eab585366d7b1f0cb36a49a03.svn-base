package com.hyphenate.chatuidemo.ui;

import android.Manifest;
import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AlertDialog;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.BaseAdapter;
import com.hyphenate.chat.EMMessage;
import com.hyphenate.chat.EMTextMessageBody;
import com.hyphenate.easeui.ui.EaseChatFragment;
import com.hyphenate.easeui.ui.EaseChatFragment.EaseChatFragmentHelper;
import com.hyphenate.easeui.widget.chatrow.EaseChatRow;
import com.hyphenate.easeui.widget.chatrow.EaseCustomChatRowProvider;
import com.hyphenate.util.EasyUtils;
import com.lzy.imagepicker.ImagePicker;
import com.lzy.imagepicker.bean.ImageItem;
import com.lzy.imagepicker.ui.ImageGridActivity;
import com.lzy.imagepicker.view.CropImageView;
import com.yishanxiu.yishang.R;
import com.yishanxiu.yishang.activity.MainActivity2;
import com.yishanxiu.yishang.activity.base.BaseActivity;
import com.yishanxiu.yishang.model.shopmall.CustomServiceProductInfo;
import com.yishanxiu.yishang.utils.Constant;
import com.yishanxiu.yishang.utils.ExtraKeys;
import com.yishanxiu.yishang.utils.Utils;
import org.json.JSONException;
import org.json.JSONObject;
import pub.devrel.easypermissions.AfterPermissionGranted;
import pub.devrel.easypermissions.EasyPermissions;

import java.util.ArrayList;
import java.util.List;

public class ChatFragment extends EaseChatFragment implements EaseChatFragmentHelper, EasyPermissions.PermissionCallbacks {

	//避免和基类定义的常量可能发生的冲突，常量从11开始定义

	private String[] camera_permissions = {Manifest.permission.CAMERA};

	private static final int REQUEST_CODE_SELECT_VIDEO = 11;
	private static final int REQUEST_CODE_SELECT_FILE = 12;
	private static final int REQUEST_CODE_GROUP_DETAIL = 13;
	private static final int REQUEST_CODE_CONTEXT_MENU = 14;
	private static final int REQUEST_CODE_SELECT_LOCAL = 15;
	private static final int REQUEST_CODE_CAMERA = 16;


	private static final int MESSAGE_TYPE_SENT_VOICE_CALL = 1;
	private static final int MESSAGE_TYPE_RECV_VOICE_CALL = 2;
	private static final int MESSAGE_TYPE_SENT_VIDEO_CALL = 3;
	private static final int MESSAGE_TYPE_RECV_VIDEO_CALL = 4;


	/**
	 * 是否为环信小助手
	 */
	private boolean isRobot;

	private ImagePicker imagePicker;

	/**
	 * 跳转来源  1：商品
	 */
	public  int from=0;


	@Override
	protected void setUpView() {
		setChatFragmentListener(this);
		initImagePicker();
		if (chatType == Constant.CHATTYPE_SINGLE) {
//            Map<String,RobotUser> robotMap = DemoHelper.getInstance().getRobotList();
//            if(robotMap!=null && robotMap.containsKey(toChatUsername)){
//                isRobot = true;
//            }
		}
		super.setUpView();
		// 设置标题栏点击事件
		titleBar.setLeftLayoutClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (EasyUtils.isSingleActivity(getActivity())) {
					Intent intent = new Intent(getActivity(), MainActivity2.class);
					startActivity(intent);
				}
				getActivity().finish();
			}
		});
		Bundle bundle=getArguments();
		from=bundle.getInt(ExtraKeys.Key_Msg1,-1);
		if (from == 0) {
			sendCurrentUserInfo();
		}if(from==1){
			sendProductInfo((CustomServiceProductInfo) bundle.getSerializable(ExtraKeys.Key_Msg2));
		} else {

		}

//        ((EaseEmojiconMenu)inputMenu.getEmojiconMenu()).addEmojiconGroup(EmojiconExampleGroupData.getData());
	}

	//发送当前用户信息
	private void sendCurrentUserInfo() {
		//例如:有个真名叫李明，昵称小明的访客，已经提供了QQ号，公司名和联系方式等信息。

		EMMessage message = EMMessage.createTxtSendMessage("你好", toChatUsername);
		JSONObject jsonMsgType = new JSONObject();
		JSONObject jsonTrack = new JSONObject();
		try{
			jsonTrack.put("userNickname", Utils.getUserNickName(getActivity()));
			jsonTrack.put("description", Utils.getUserDiscri(getActivity()));
			jsonMsgType.put("visitor", jsonTrack);
		}
		catch(JSONException e){
			e.printStackTrace();
		}
		message.setAttribute("weichat", jsonMsgType);
		sendMessage(message);
	}

	//发送商品信息
	private void sendProductInfo(CustomServiceProductInfo productInfo){
		EMMessage message = EMMessage.createTxtSendMessage("你好", toChatUsername);
		JSONObject jsonMsgType = new JSONObject();
		JSONObject jsonTrack = new JSONObject();

		JSONObject jsonMsgUserInfoType = new JSONObject();
		JSONObject jsonUserInfoTrack = new JSONObject();
		try{
			jsonTrack.put("title", productInfo.getTitle());
			jsonTrack.put("price", productInfo.getCostPrice());
			jsonTrack.put("desc", productInfo.getDesc());
			jsonTrack.put("img_url", productInfo.getPath());
			jsonTrack.put("item_url", productInfo.getProductUrl());
			jsonMsgType.put("track", jsonTrack);

			jsonUserInfoTrack.put("trueName", Utils.getUserAccount(getActivity()));
			jsonUserInfoTrack.put("userNickname", Utils.getUserNickName(getActivity()));
			jsonUserInfoTrack.put("description", Utils.getUserDiscri(getActivity()));
			jsonMsgUserInfoType.put("visitor", jsonUserInfoTrack);
		}
		catch(JSONException e){
			e.printStackTrace();
		}
		message.setAttribute("msgtype", jsonMsgType);
		message.setAttribute("weichat", jsonMsgUserInfoType);
		sendMessage(message);
	}
	private void initImagePicker() {
		imagePicker = ImagePicker.getInstance();
		imagePicker.setMultiMode(false);
		imagePicker.setCrop(false);                           //允许裁剪（单选才有效）
		imagePicker.setSaveRectangle(true);                   //是否按矩形区域保存
		//imagePicker.setSelectLimit(maxImgCount);              //选中数量限制
		imagePicker.setStyle(CropImageView.Style.RECTANGLE);  //裁剪框的形状
		imagePicker.setOutPutX(640);                         //保存文件的宽度。单位像素
		imagePicker.setOutPutY(960);
	}

	@Override
	@AfterPermissionGranted(REQUEST_CODE_CAMERA)
	protected void selectPicFromCamera() {
		if (EasyPermissions.hasPermissions(getContext(), camera_permissions)) {
			startCamera();
		} else {
			// Request one permission
			EasyPermissions.requestPermissions(this, getString(R.string.camera_permission_tips), REQUEST_CODE_CAMERA, camera_permissions);
		}
	}

	private void startCamera() {
		initImagePicker();
		ImagePicker.getInstance().takePicture(this, REQUEST_CODE_CAMERA);
	}

	@Override
	protected void selectPicFromLocal() {
		initImagePicker();
		Intent intent = new Intent(getContext(), ImageGridActivity.class);
		startActivityForResult(intent, REQUEST_CODE_SELECT_LOCAL);
	}


	@Override
	public void onPermissionsGranted(int requestCode, List<String> perms) {
		if (requestCode == REQUEST_CODE_CAMERA) {
			if (perms.size() == camera_permissions.length) {
				startCamera();
			}
		}
	}

	@Override
	public void onPermissionsDenied(int requestCode, List<String> perms) {
		EasyPermissions.checkDeniedPermissionsNeverAskAgain(this,
				getString(R.string.camera_permission_tips),
				R.string.setting, R.string.cancel, perms);
	}

	@SuppressWarnings("deprecation")
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (resultCode == ImagePicker.RESULT_CODE_ITEMS) {
			if (requestCode == REQUEST_CODE_SELECT_LOCAL) {
				if (data != null) {
					ArrayList<ImageItem> images = (ArrayList<ImageItem>) data.getSerializableExtra(ImagePicker.EXTRA_RESULT_ITEMS);
					String thumnailPath = images.get(0).path;
					sendImageMessage(thumnailPath);
				}
			}
		} else if (resultCode == Activity.RESULT_OK) {
			switch (requestCode) {
				case REQUEST_CODE_CAMERA:
					ImagePicker.galleryAddPic(getActivity(), imagePicker.getTakeImageFile());
					String thumnailPath = imagePicker.getTakeImageFile().getAbsolutePath();
					sendImageMessage(thumnailPath);
					break;
				case EasyPermissions.SETTINGS_REQ_CODE:
					boolean hasSomePermissions = EasyPermissions.hasPermissions(getActivity(), camera_permissions);
					if (hasSomePermissions) {
						startCamera();
					}
					break;

				default:
					break;
			}
		}

	}

	@Override
	public void onSetMessageAttributes(EMMessage message) {
		if (isRobot) {
			//设置消息扩展属性
			message.setAttribute("em_robot_message", isRobot);
		}
	}

	@Override
	public EaseCustomChatRowProvider onSetCustomChatRowProvider() {
		//设置自定义listview item提供者
		return new CustomChatRowProvider();
	}


	@Override
	public void onEnterToChatDetails() {
//        if (chatType == Constant.CHATTYPE_GROUP) {
//            EMGroup group = EMClient.getInstance().groupManager().getGroup(toChatUsername);
//            if (group == null) {
//                Toast.makeText(getActivity(), R.string.gorup_not_found, 0).show();
//                return;
//            }
//            startActivityForResult(
//                    (new Intent(getActivity(), GroupDetailsActivity.class).putExtra("groupId", toChatUsername)),
//                    REQUEST_CODE_GROUP_DETAIL);
//        }else if(chatType == Constant.CHATTYPE_CHATROOM){
//        	startActivityForResult(new Intent(getActivity(), ChatRoomDetailsActivity.class).putExtra("roomId", toChatUsername), REQUEST_CODE_GROUP_DETAIL);
//        }
	}

	@Override
	public void onAvatarClick(String username) {
		//头像点击事件
//        Intent intent = new Intent(getActivity(), UserProfileActivity.class);
//        intent.putExtra("username", username);
//        startActivity(intent);
	}

	@Override
	public void onAvatarLongClick(String username) {

	}

	@Override
	public boolean onMessageBubbleClick(EMMessage message) {
		//消息框点击事件，demo这里不做覆盖，如需覆盖，return true
		return false;
	}

	@Override
	public void onMessageBubbleLongClick(EMMessage message) {
		// 消息框长按
//		startActivityForResult((new Intent(getActivity(), ContextMenuActivity.class)).putExtra("message", message),
//				REQUEST_CODE_CONTEXT_MENU);
		AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
		//builder.setTitle("提示");
		// builder.setView()
		int type = message.getType().ordinal();
		if (type == EMMessage.Type.TXT.ordinal()) {
			if (message.getBooleanAttribute(Constant.MESSAGE_ATTR_IS_VIDEO_CALL, false) ||
					message.getBooleanAttribute(Constant.MESSAGE_ATTR_IS_VOICE_CALL, false)) {
				builder.setMessage("确定删除此消息吗？");
				builder.setNegativeButton(R.string.cancel, null);
				builder.setPositiveButton(R.string.ok, delBtClickListener);
			} else if (message.getBooleanAttribute(Constant.MESSAGE_ATTR_IS_BIG_EXPRESSION, false)) {
				builder.setMessage("确定删除此消息吗？");
				builder.setNegativeButton(R.string.cancel, null);
				builder.setPositiveButton(R.string.ok, delBtClickListener);
			} else {
				builder.setItems(R.array.txt_msg_option_lable, listItemClickListener);
			}
		} else if (type == EMMessage.Type.LOCATION.ordinal()) {
			//setContentView(R.layout.em_context_menu_for_location);
		} else if (type == EMMessage.Type.IMAGE.ordinal()) {
			builder.setMessage("确定删除此消息吗？");
			builder.setNegativeButton(R.string.cancel, null);
			builder.setPositiveButton(R.string.ok, delBtClickListener);
		} else if (type == EMMessage.Type.VOICE.ordinal()) {
			builder.setMessage("确定删除此消息吗？");
			builder.setNegativeButton(R.string.cancel, null);
			builder.setPositiveButton(R.string.ok, delBtClickListener);
		} else if (type == EMMessage.Type.VIDEO.ordinal()) {
			builder.setMessage("确定删除此消息吗？");
			builder.setNegativeButton(R.string.cancel, null);
			builder.setPositiveButton(R.string.ok, delBtClickListener);
		} else if (type == EMMessage.Type.FILE.ordinal()) {
			builder.setMessage("确定删除此消息吗？");
			builder.setNegativeButton(R.string.cancel, null);
			builder.setPositiveButton(R.string.ok, delBtClickListener);
		}
		builder.create().show();
	}

	@Override
	public boolean onExtendMenuItemClick(int itemId, View view) {
		return false;
	}


	/**
	 * chat row provider
	 */
	private final class CustomChatRowProvider implements EaseCustomChatRowProvider {
		@Override
		public int getCustomChatRowTypeCount() {
			//音、视频通话发送、接收共4种
			return 4;
		}

		@Override
		public int getCustomChatRowType(EMMessage message) {
			if (message.getType() == EMMessage.Type.TXT) {
				//语音通话类型
				if (message.getBooleanAttribute(Constant.MESSAGE_ATTR_IS_VOICE_CALL, false)) {
					return message.direct() == EMMessage.Direct.RECEIVE ? MESSAGE_TYPE_RECV_VOICE_CALL : MESSAGE_TYPE_SENT_VOICE_CALL;
				} else if (message.getBooleanAttribute(Constant.MESSAGE_ATTR_IS_VIDEO_CALL, false)) {
					//视频通话
					return message.direct() == EMMessage.Direct.RECEIVE ? MESSAGE_TYPE_RECV_VIDEO_CALL : MESSAGE_TYPE_SENT_VIDEO_CALL;
				}
			}
			return 0;
		}

		@Override
		public EaseChatRow getCustomChatRow(EMMessage message, int position, BaseAdapter adapter) {
//            if(message.getType() == EMMessage.Type.TXT){
//                // 语音通话,  视频通话
//                if (message.getBooleanAttribute(Constant.MESSAGE_ATTR_IS_VOICE_CALL, false) ||
//                    message.getBooleanAttribute(Constant.MESSAGE_ATTR_IS_VIDEO_CALL, false)){
//                    return new ChatRowVoiceCall(getActivity(), message, position, adapter);
//                }
//            }
			return null;
		}

	}


	DialogInterface.OnClickListener delBtClickListener = new DialogInterface.OnClickListener() {
		@Override
		public void onClick(DialogInterface dialog, int which) {
			conversation.removeMessage(contextMenuMessage.getMsgId());
			messageList.refresh();
		}
	};

	DialogInterface.OnClickListener listItemClickListener = new DialogInterface.OnClickListener() {
		@Override
		public void onClick(DialogInterface dialog, int which) {
			switch (which) {
				case 0:
					clipboard.setText(((EMTextMessageBody) contextMenuMessage.getBody()).getMessage());
					((BaseActivity)getActivity()).toast.showToast(R.string.copy_success);
					break;
				case 1:
					conversation.removeMessage(contextMenuMessage.getMsgId());
					messageList.refresh();
					break;
				case 2:
					break;
				default:
			}


		}
	};
}
