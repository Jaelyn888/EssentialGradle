package com.yishanxiu.yishang.fragment;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.support.v4.view.ViewPager;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.handmark.pulltorefresh.library.PullToRefreshScrollView;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.yishanxiu.yishang.R;
import com.yishanxiu.yishang.activity.LoginActivity;
import com.yishanxiu.yishang.activity.ProductCommentsActivity;
import com.yishanxiu.yishang.adapter.ProductPicAdapter;
import com.yishanxiu.yishang.adapter.RelationProductAdapter;
import com.yishanxiu.yishang.app.MyApplication;
import com.yishanxiu.yishang.getdata.GetDataConfing;
import com.yishanxiu.yishang.getdata.GetDataQueue;
import com.yishanxiu.yishang.getdata.IGetServicesDataCallBack;
import com.yishanxiu.yishang.getdata.JsonKeys;
import com.yishanxiu.yishang.getdata.ShowGetDataError;
import com.yishanxiu.yishang.model.CustomServiceProductInfo;
import com.yishanxiu.yishang.utils.*;
import com.yishanxiu.yishang.view.CircleImageView;
import com.yishanxiu.yishang.view.GridViewNoScroll;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.graphics.Point;
import android.os.Bundle;
import android.support.v4.content.res.ResourcesCompat;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.style.TextAppearanceSpan;
import android.view.Display;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import cn.iwgang.countdownview.CountdownView;
import me.kaede.tagview.OnTagClickListener;
import me.kaede.tagview.Tag;
import me.kaede.tagview.TagView;
import net.tsz.afinal.json.JsonMap;
import net.tsz.afinal.json.JsonParseHelper;

/**
 * 商品详情
 *
 * @author FangDongzhang 2016/8/3
 */
public class ProductDetailFragment extends LazyFragment {

	@ViewInject(R.id.ptr_scrollview)
	private PullToRefreshScrollView ptr_scrollview;

	@ViewInject(R.id.llt_pro_datail)
	private LinearLayout llt_pro_datail;

	@ViewInject(R.id.pro_detail)
	private RelativeLayout pro_detail;

	/**
	 * 店铺layout
	 */
	// @ViewInject(R.id.base_brand_layout)
	// private LinearLayout base_brand_layout;
	// @ViewInject(R.id.iv_head)
	// private ImageView brandLogo_iv;
	// @ViewInject(R.id.tv_name)
	// private TextView brand_name_tv;
	// @ViewInject(R.id.tv_msg)
	// private TextView brand_discri_tv;

	/**
	 * 动画的imageview
	 */
	// @ViewInject(R.id.iv_anim_collection)
	// private ImageView iv_anim_collection;

	@ViewInject(R.id.home_goods_pic_vp)
	private ViewPager home_goods_pic_vp; // 商品的图片

	/**
	 * 剩余商品数量
	 */
	@ViewInject(R.id.goods_retain_tv)
	private TextView goods_retain_tv;
	/**
	 * 刷新图下第一行
	 */
	@ViewInject(R.id.product_name_tv)
	private TextView product_name_tv;

	/**
	 * 现价
	 */
	@ViewInject(R.id.product_price_tv)
	private TextView product_price_tv;
	/**
	 * 查看详情
	 */
	@ViewInject(R.id.promotion_tv)
	private TextView promotion_tv;

	/**
	 * 原价
	 */
	@ViewInject(R.id.product_price_discount_tv)
	private TextView product_price_discount_tv;

	/**
	 * 收藏人数
	 */
	@ViewInject(R.id.collect_tv)
	private TextView collect_tv;
	/**
	 * 联系客服
	 */
	@ViewInject(R.id.custom_service_tv)
	private TextView custom_service_tv;

	/**
	 * 加入购物车
	 */
	@ViewInject(R.id.add_cart_tv)
	private TextView add_cart_tv;

	/**
	 * 选择颜色 尺码
	 */
	@ViewInject(R.id.product_specifiction_tv)
	private LinearLayout product_specifiction_tv;

	/**
	 * 店铺
	 */
	@ViewInject(R.id.shop_tv)
	private TextView shop_tv;

	@ViewInject(R.id.relation_product_gv)
	private GridViewNoScroll relation_product_gv;

	/**
	 * 下拉刷新Gridview适配器
	 */
	private RelationProductAdapter relationProductAdapter;

	/**
	 * 商品图片展示图
	 */
	private ProductPicAdapter productPicAdapter;

	@ViewInject(R.id.view_ind_layout)
	private LinearLayout view_ind_layout; // 指示器

	/**
	 * 商品评论
	 */
	/**
	 * 商品评论大布局
	 */
	@ViewInject(R.id.goods_comments_layout)
	private LinearLayout goods_comments_layout;
	/**
	 * 查看所有评论
	 */
	@ViewInject(R.id.scan_all_comments_tv)
	private TextView scan_all_comments_tv;

	/**
	 * 评论提示
	 */
	@ViewInject(R.id.goods_comments_tv)
	private TextView goods_comments_tv;
	/**
	 * 用户头像
	 */
	@ViewInject(R.id.user_photo_iv)
	private CircleImageView user_photo_iv;
	/**
	 * 用户名
	 */
	@ViewInject(R.id.userName_tv)
	private TextView userName_tv;

	/**
	 * 评论内容
	 */
	@ViewInject(R.id.userComments_tv)
	private TextView userComments_tv;

	@ViewInject(R.id.create_time_tv)
	private TextView create_time_tv;

	//倒计时
	@ViewInject(R.id.countdownLayout)
	private LinearLayout countdownLayout;
	@ViewInject(R.id.countdownView)
	private CountdownView countdownView;

	/**
	 * 评论中 商品尺码 颜色
	 */
	@ViewInject(R.id.goods_color_size_tv)
	private TextView goods_color_size_tv;

	private String productId; // 商品id
	private String shopId;
	private String brandId;// 品牌Id
	public JsonMap<String, Object> goodsDatas;
	/**
	 * 相关商品数据
	 */
	private List<JsonMap<String, Object>> dataList;
	private int nPage = 1;
	public PopupWindow popupWindow;
	private String skuId;
	// sku库存
	private int count;
	/**
	 * 加入购物车
	 *
	 * @button
	 */
	private TextView addShopCar;

	private ImageView iv_pronum_jian, iv_pronum_jia, pro_pic;
	private int pronum = 1;
	private final int MAX_NUM = 99;
	private TextView et_product_pronum;
	private TextView select_goods_params_tv;
	private TextView tv_stocks;// 库存显示
	private TextView price_tv;

	/**
	 * 当前展示的商品的可选参数的列表信息
	 */
	private List<TagView> pips;
	public List<JsonMap<String, Object>> specifictionList;

	@Override
	protected void onCreateViewLazy(Bundle savedInstanceState) {
		super.onCreateViewLazy(savedInstanceState);
		setContentView(R.layout.fragment_pro_detail);
		ViewUtils.inject(this, getContentView());

		Bundle bundle = getArguments();
		productId = bundle.getString(Constant.ID);
		ViewGroup.LayoutParams linearParams = (ViewGroup.LayoutParams) home_goods_pic_vp.getLayoutParams();
		linearParams.height = DisplayUtil.screenWidth;
		home_goods_pic_vp.setLayoutParams(linearParams);
		if (TextUtils.isEmpty(productId)) {
			activity.finish();
		} else {
			relation_product_gv.setOnItemClickListener(onItemClickListener);
			ptr_scrollview.setMode(PullToRefreshBase.Mode.PULL_FROM_END);
			ptr_scrollview.setOnRefreshListener(loadMoreListener);
			productPicAdapter = new ProductPicAdapter(activity);

			relationProductAdapter = new RelationProductAdapter(activity);
			relationProductAdapter.setShowDiscri(true);
			relation_product_gv.setAdapter(relationProductAdapter);
			getGoodsDetial();
			getProudctSpec();
		}
	}

	@Override
	protected void onFragmentStartLazy() {
		// TODO Auto-generated method stub
		super.onFragmentStartLazy();

	}

	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);
	}

	@SuppressLint("NewApi")
	private void init() {
		Display display = activity.getWindowManager().getDefaultDisplay();
		Point size = new Point();
		display.getSize(size);
		int height = size.y;
		LinearLayout.LayoutParams linearParams = (LinearLayout.LayoutParams) home_goods_pic_vp.getLayoutParams();
		linearParams.height = height;
	}

	/**
	 * 商品点击
	 */
	private AdapterView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
			JsonMap<String, Object> map = dataList.get(position);
			String goods_id = map.getStringNoNull("productId");
			String brandName = map.getStringNoNull("brandName");
			activity.seeProductDetail(goods_id, brandName);
		}
	};

	// 购物车接口
	// private void getShopCartNum() {
	// Map<String, Object> params = new HashMap<String, Object>();
	//
	// params.put("UserAccount", Utils.getUserAccount(this));
	// GetDataQueue queue = new GetDataQueue();
	// queue.setCallBack(callBack);
	// queue.setActionName(GetDataConfing.GetAction_GetShoppingCartCount);
	// queue.setWhat(GetDataConfing.What_GetShoppingCartCount);
	// queue.setParamsNoJson(params);
	// getDataUtil.getData(queue);
	// }

	/**
	 * 刷新监听
	 */
	private OnRefreshListener2<ScrollView> loadMoreListener = new PullToRefreshBase.OnRefreshListener2<ScrollView>() {
		@Override
		public void onPullDownToRefresh(PullToRefreshBase<ScrollView> refreshView) {

		}

		@Override
		public void onPullUpToRefresh(PullToRefreshBase<ScrollView> refreshView) {
			getRelationGoods();
		}
	};

	/**
	 * 获取商品详情 * {Id:15973}
	 */
	private void getGoodsDetial() {
		loadingToast.show();
		Map<String, Object> params = new HashMap<String, Object>();
		if (Utils.isHasLogin(activity)) {
			params.put("userId", Utils.getUserId(activity));
		}
		params.put("productId", productId);
		GetDataQueue queue = new GetDataQueue();
		queue.setActionName(GetDataConfing.GetAction_GetProductDetails);
		queue.setParamsNoJson(params);
		queue.setCallBack(callBack);
		queue.setWhat(GetDataConfing.What_GetProductDetails);
		getDataUtil.getData(queue);
	}

	/**
	 * 获取相关商品 {VendorId:165,CategoryId:1535,currentPage:1,pageSize:10} 相关商品
	 * pageIndex 页数 categoryId 大分类Id productId 商品Id
	 */
	private void getRelationGoods() {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("pageIndex", String.valueOf(nPage));
		params.put("productId", productId);
		GetDataQueue queue = new GetDataQueue();
		queue.setActionName(GetDataConfing.GetAction_GetProudctCategroyList);
		queue.setParamsNoJson(params);
		queue.setCallBack(callBack);
		queue.setWhat(GetDataConfing.What_GetProudctCategroyList);
		getDataUtil.getData(queue);

	}

	// @OnClick(R.id.base_brand_layout)
	// public void base_brand_layout_click(View view) {
	// if (goodsDatas == null) {
	// return;
	// }
	// JsonMap<String, Object> hashMap = new JsonMap<String, Object>();
	// hashMap.put("brandId", brandId);
	// hashMap.put("brandName", goodsDatas.getStringNoNull("brandName"));
	// hashMap.put("pageDesc", goodsDatas.getStringNoNull("pageDesc"));
	// hashMap.put("logoPath", goodsDatas.getStringNoNull("logoPath"));
	// activity.seeShopDetail(hashMap);
	// }

	/**
	 * 查看所有评论
	 *
	 * @param view
	 */
	@OnClick(R.id.scan_all_comments_tv)
	public void scan_all_comments_tv_click(View view) {
		if (goodsDatas == null) {
			return;
		}
		Intent intent = new Intent(activity, ProductCommentsActivity.class);
		intent.putExtra(Constant.ID, productId);
		activity.jumpTo(intent, false);
	}

	/**
	 * 分享的点击事件
	 *
	 * @param view
	 */
	public void share_iv_click(View view) {
		if (goodsDatas == null) {
			return;
		}
		String shareLogo = goodsDatas.getStringNoNull("path");
		String shareContent = goodsDatas.getStringNoNull("words");
		String shareTitle = goodsDatas.getStringNoNull("salesName");
		String shareUrl = "pages/busi_platform/business/sharepages/gods_detail.html?productId=" + productId;
		ShareSocialUtils.showShareCompont(activity, shareLogo, shareUrl, shareTitle, shareContent);
	}

	/**
	 * 进入店铺
	 *
	 * @param view
	 */
	@OnClick(R.id.shop_tv)
	public void shop_tv_click(View view) {
		if (goodsDatas == null) {
			return;
		}
		JsonMap<String, Object> hashMap = new JsonMap<String, Object>();
		hashMap.put("brandId", brandId);
		hashMap.put("brandName", goodsDatas.getStringNoNull("brandName"));
		hashMap.put("pageDesc", goodsDatas.getStringNoNull("pageDesc"));
		hashMap.put("logoPath", goodsDatas.getStringNoNull("logoPath"));
		activity.seeShopDetail(hashMap);
	}

	/**
	 * 联系客服
	 *
	 * @param view
	 */
	@OnClick(R.id.custom_service_tv)
	public void custom_service_tv_click(View view) {
		if (goodsDatas == null) {
			return;
		}
		CustomServiceProductInfo customServiceProductInfo=new CustomServiceProductInfo();
		String shareLogo = goodsDatas.getStringNoNull("path");
		String shareContent = goodsDatas.getStringNoNull("words");
		String shareTitle = goodsDatas.getStringNoNull("salesName");
		String shareUrl =GetDataConfing.Url_Base+ "pages/busi_platform/business/sharepages/gods_detail.html?productId=" + productId;
		customServiceProductInfo.setPath(shareLogo);
		customServiceProductInfo.getCostPrice();
		customServiceProductInfo.setProductId(Long.parseLong(productId));
		customServiceProductInfo.setDesc(shareContent);
		customServiceProductInfo.setTitle(shareTitle);
		customServiceProductInfo.setProductUrl(shareUrl);
		activity.contactCustomServiceAndSendInfo(Constant.IM, Constant.CHATTYPE_SINGLE,1,customServiceProductInfo);
	}

	/**
	 * 收藏的点击事件
	 *
	 * @param view
	 */
	@OnClick(R.id.collect_tv)
	public void collect_tv_click(View view) {
		if (goodsDatas == null) {
			return;
		}
		activity.getDate_GetFocusOn(callBack, productId, Constant.CollectionType.Product, activity);
	}

	/**
	 * 加入购物车的点击事件
	 *
	 * @param view
	 */
	@OnClick(R.id.add_cart_tv)
	public void add_cart_tv_click(View view) {
		if (goodsDatas == null) {
			return;
		}
		if (Utils.isFastClick() == false) {
			if (Utils.isHasLogin(activity)) {
				SpecificationPopwindow();
			} else {
				activity.jumpTo(LoginActivity.class);
			}
		}
	}

	/**
	 * 选择规格
	 *
	 * @param view
	 */
	@OnClick(R.id.product_specifiction_tv)
	public void product_specifiction_tv_click(View view) {
		if (goodsDatas == null) {
			return;
		}
		if (Utils.isFastClick() == false) {
			if (Utils.isHasLogin(activity)) {
				SpecificationPopwindow();
			} else {
				activity.jumpTo(LoginActivity.class);
			}
		}
	}

	private IGetServicesDataCallBack callBack = new IGetServicesDataCallBack() {
		@Override
		public void onLoaded(GetDataQueue entity) {
			if (entity.isOk()) {
				if (ShowGetDataError.isCodeSuccess(activity, entity.getInfo())) {
					if (entity.what == GetDataConfing.What_GetProudctCategroyList) {
						ptr_scrollview.onRefreshComplete();
						List<JsonMap<String, Object>> data_server = JsonParseHelper
								.getJsonMap_List_JsonMap(entity.getInfo(), JsonKeys.Key_Info);
						setData(data_server);
						validateData(data_server);
					} else if (entity.what == GetDataConfing.What_GetShoppingCartCount) { // 获取购物车数据
						int num = JsonParseHelper.getJsonMap_List_JsonMap(entity.getInfo(), JsonKeys.Key_Info).get(0)
								.getInt("Count");
						MyApplication.getInstance().setShopcart_num(num);
						// refreshShoppingCartNum();
					} else if (entity.what == GetDataConfing.What_AddShoppingCart) {// 添加购物车
						JsonMap<String, Object> data = JsonParseHelper.getJsonMap(entity.getInfo());
						String msg = data.getString(JsonKeys.Key_Msg);
						toast.showToast(msg);
						if (popupWindow != null && popupWindow.isShowing()) {
							popupWindow.dismiss();
						}
						// MyApplication.getInstance().addShopCartNum();
						// refreshShoppingCartNum();
					} else if (entity.what == GetDataConfing.What_GetProductDetails) {
						goodsDatas = JsonParseHelper.getJsonMap_JsonMap(entity.getInfo(), JsonKeys.Key_Info);
						refreshGoodsDetail();
					} else if (entity.what == GetDataConfing.What_GetProductSpec) {// 规格列表
						specifictionList = JsonParseHelper.getJsonMap_List_JsonMap(entity.getInfo(), JsonKeys.Key_Info);
						// setParamsView();
					} else if (entity.what == GetDataConfing.What_GetProductByproidandSpec) {// 规格列表返回
						JsonMap<String, Object> jsonMap = JsonParseHelper.getJsonMap_JsonMap(entity.getInfo(),
								JsonKeys.Key_Info);
						flushMsg(jsonMap);
					} else if (entity.what == GetDataConfing.WHAT_GET_FOCUS_ON) { // 收藏商品
						JsonMap<String, Object> data = JsonParseHelper.getJsonMap_JsonMap(entity.getInfo(),
								JsonKeys.Key_Info);
						boolean isCollected = data.getBoolean("isCollected");
						toast.showToast(data.getStringNoNull(JsonKeys.Key_Msg));
						collect_tv.setSelected(isCollected);
						collect_tv.setText(isCollected ? R.string.collectioned : R.string.collection);
						if (isCollected) {
							startAnimation();
						}
						activity.sendBroadcast(new Intent(Constant.ACT_PRODUCT_COLLECTION_CHANGE));
					}
				} else {
					if (entity.what == GetDataConfing.What_GetProudctCategroyList) {
						ptr_scrollview.onRefreshComplete();
					}
				}
			} else {
				if (entity.what == GetDataConfing.What_GetProudctCategroyList) {
					ptr_scrollview.onRefreshComplete();
				}
				ShowGetDataError.showNetError(activity);
			}
			loadingToast.dismiss();
		}

	};

	/**
	 * 刷新提示信息
	 *
	 * @param info
	 */
	private void flushMsg(JsonMap<String, Object> info) {
		skuId = info.getStringNoNull("skuId");
		count = info.getInt("count", 0);

		select_goods_params_tv.setText(getProductParamsSelectTitle());
		tv_stocks.setText(
				getResources().getString(R.string.pro_count) + count + getResources().getString(R.string.item));
		price_tv.setText(StringUtils.getFormatMoneyWithSign(info.getStringNoNull("prices")));
		if (count >= pronum) {
		} else {
			pronum = 1;
			show();
		}

	}

	private void startAnimation() {
		Animation animout = AnimationUtils.loadAnimation(activity, R.anim.zoom_exit);
		// iv_anim_collection.setVisibility(View.VISIBLE);
		// iv_anim_collection.startAnimation(animout);
		animout.setAnimationListener(new Animation.AnimationListener() {
			@Override
			public void onAnimationStart(Animation animation) {

			}

			@Override
			public void onAnimationEnd(Animation animation) {
				// iv_anim_collection.setVisibility(View.GONE);
			}

			@Override
			public void onAnimationRepeat(Animation animation) {

			}
		});
	}

	/**
	 * 设置商品信息 并请求相关商品的信息
	 */
	private void refreshGoodsDetail() {
		if (goodsDatas.size() > 0) {
			llt_pro_datail.setVisibility(View.VISIBLE);
		} else {
			llt_pro_datail.setVisibility(View.GONE);
		}
		brandId = goodsDatas.getStringNoNull("brandId");
		shopId = goodsDatas.getStringNoNull("shopId");
		// (ProductDetail2)activity.setUrl(goodsDatas.getStringNoNull("productDescribe"),goodsDatas.getStringNoNull("returnProductExplain"));
		// brand_name_tv.setText(goodsDatas.getStringNoNull("shopName"));
		// brand_discri_tv.setText(goodsDatas.getStringNoNull("shopDescribe"));
		// String brandLogoPath = goodsDatas.getStringNoNull("logoPath");
		// BitmapHelper.loadImage(activity, brandLogoPath, brandLogo_iv);

		// 商品图
		final List<JsonMap<String, Object>> productPics = goodsDatas.getList_JsonMap("picList");
		if (productPics.size() != 0) {
			home_goods_pic_vp.setVisibility(View.VISIBLE);
			productPicAdapter = new ProductPicAdapter(activity, productPics);
			productPicAdapter.setOnItemClickListener(new ProductPicAdapter.OnItemClickListener() {
				@Override
				public void onItemClick(int position, int index) {
					String str = goodsDatas.getStringNoNull("picList");
					activity.goodsImage_click(str, index % productPics.size());
				}
			});
			productPicAdapter.setIndContainerView(view_ind_layout);
			home_goods_pic_vp.setAdapter(productPicAdapter);
			home_goods_pic_vp.setCurrentItem(productPics.size() * 100);

			home_goods_pic_vp.addOnPageChangeListener(productPicAdapter);
		} else {
			home_goods_pic_vp.setVisibility(View.GONE);
		}

		// 商品状态和上下架
		boolean isEnable = goodsDatas.getBoolean("SaleStatus");
		if (isEnable) {
			int stock = goodsDatas.getInt("spuStock");
			if (stock < 4) {
				// goods_retain_tv.setVisibility(View.VISIBLE);
				if (stock < 1) {
					goods_retain_tv.setText(R.string.salve_over);
					ViewAnimationUtils.startAnimation(activity, goods_retain_tv);
				} else {
					String strFormat = this.getString(R.string.product_retain);
					String goods_retain_str = String.format(strFormat, stock + "");
					goods_retain_tv.setText(goods_retain_str);
					ViewAnimationUtils.startAnimation(activity, goods_retain_tv);
				}
			} else {
				goods_retain_tv.setVisibility(View.INVISIBLE);
			}

		} else {
			// goods_retain_tv.setVisibility(View.VISIBLE);
			goods_retain_tv.setText(R.string.sales_off);
			ViewAnimationUtils.startAnimation(activity, goods_retain_tv);
		}

		/**
		 * 商品名字和价格
		 */
		product_name_tv.setText(goodsDatas.getStringNoNull("salesName"));

		double marketPrice = goodsDatas.getDouble("costPrice"); // 原价
		boolean isPromotion = goodsDatas.getBoolean("isPromotion");
		if (isPromotion) {

			String promotinEndTime =goodsDatas.getString("promotinEndTime");
			long promotinEndTimeLong= 0;
			try {
				promotinEndTimeLong = StringUtils.stringToLong(promotinEndTime);
				long currentTimeMillis=System.currentTimeMillis();

				long time4 = promotinEndTimeLong-currentTimeMillis;
				countdownView.start(time4);
				countdownLayout.setVisibility(View.VISIBLE);

			} catch (ParseException e) {
				e.printStackTrace();
			}

			double discountPrice = goodsDatas.getDouble("discountPrice"); // 折扣价
			product_price_discount_tv.setText(initMoney(StringUtils.getFormatMoneyWithSign(discountPrice)));

			product_price_tv.setText(StringUtils.getFormatMoneyWithSign(marketPrice));
			Utils.addDeleteLine(product_price_tv);

			product_price_tv.setVisibility(View.VISIBLE);
			promotion_tv.setText(goodsDatas.getStr("promotionName"));
			promotion_tv.setVisibility(View.VISIBLE);

		} else {
			product_price_tv.setVisibility(View.GONE);
			promotion_tv.setVisibility(View.GONE);
			product_price_discount_tv.setText(initMoney(StringUtils.getFormatMoneyWithSign(marketPrice)));
		}

		// 商品评论
		int productCommentsCount = goodsDatas.getInt("commentCount");
		if (productCommentsCount > 0) {
			goods_comments_layout.setVisibility(View.VISIBLE);
			JsonMap<String, Object> commentJson = goodsDatas.getJsonMap("recommendComment");

			userName_tv.setText(commentJson.getStringNoNull("userNickname"));
			String stringFormat = getString(R.string.goods_comments);
			String msg = String.format(stringFormat, productCommentsCount);
			goods_comments_tv.setText(msg);
			BitmapHelper.setUserIcon(activity, commentJson, user_photo_iv);
			userComments_tv.setText(commentJson.getStringNoNull("commentContent"));
			goods_color_size_tv.setText(commentJson.getStringNoNull("productSpecification"));
		} else {
			goods_comments_layout.setVisibility(View.GONE);
		}
		create_time_tv.setVisibility(View.GONE);

		boolean isCollected = goodsDatas.getBoolean("isCollection");
		collect_tv.setSelected(isCollected);
		collect_tv.setText(isCollected ? R.string.collectioned : R.string.collection);
		getRelationGoods();
	}

	/**
	 * ￥缩小显示
	 * 
	 * @param value
	 * @return
	 */
	private SpannableStringBuilder initMoney(String value) {
		SpannableStringBuilder style = new SpannableStringBuilder(value);
		style.setSpan(new TextAppearanceSpan(activity, R.style.style1), 0, 1, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
		return style;
	}

	private void setData(List<JsonMap<String, Object>> data_server) {
		if (nPage == 1) {
			dataList = data_server;
			relationProductAdapter.setDatas(data_server);
			relation_product_gv.setAdapter(relationProductAdapter);
		} else {
			dataList.addAll(data_server);
			relationProductAdapter.notifyDataSetChanged();
		}
		nPage++;
	}

	/**
	 * 校验数据 显示无数据等
	 * <p/>
	 * 是否请求正常 网络错误且数据为空的话显示网络异常界面 提供刷新的接口
	 *
	 * @param data_server
	 */
	private void validateData(List<JsonMap<String, Object>> data_server) {
		if (data_server.size() == 0) {
			ptr_scrollview.setMode(PullToRefreshBase.Mode.MANUAL_REFRESH_ONLY);
		} else {
			ptr_scrollview.setMode(PullToRefreshBase.Mode.PULL_FROM_END);
		}
	}

	/**
	 * 规格
	 *
	 * @author FangDongzhang
	 */
	public LinearLayout goods_params;

	public void SpecificationPopwindow() {
		skuId = "";
		count = 0;
		View view = activity.getLayoutInflater().inflate(R.layout.select_goods_params_layout, null);
		popupWindow = new PopupWindow(view, ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
		view.startAnimation(AnimationUtils.loadAnimation(activity, R.anim.fade_ins));
		LinearLayout ll_popup = (LinearLayout) view.findViewById(R.id.relativeLayout01);
		ll_popup.startAnimation(AnimationUtils.loadAnimation(activity, R.anim.push_bottom_in_2));
		popupWindow.setOutsideTouchable(true);
		popupWindow.setContentView(view);
		popupWindow.showAtLocation(view, Gravity.BOTTOM, 0, 0);
		popupWindow.update();

		popInitView(view);
		String path = goodsDatas.getStringNoNull("path");
		BitmapHelper.loadImage(activity, StringUtils.get_MImage(path), pro_pic, BitmapHelper.LoadImgOption.BrandLogo);
		setParamsView();
		// et_product_pronum.addTextChangedListener(textWatcher);
		addShopCar.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View view) {
				if (Utils.isFastClick()) {
					return;
				}
				if (TextUtils.isEmpty(skuId)) {
					toast.showToast(R.string.select_product_specification);
					return;
				}
				if (count < 1) {
					toast.showToast(R.string.stock_short);
					return;
				}
				add2Cart();
			}
		});
		iv_pronum_jia.setOnClickListener(onClickListener);
		iv_pronum_jian.setOnClickListener(jianOnClick);
		RelativeLayout layout = (RelativeLayout) view.findViewById(R.id.rlt_pop);
		layout.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				popupWindow.dismiss();
			}
		});
		// } else if (!popupWindow.isShowing()) {
		// popupWindow.showAtLocation(add_cart_tv, Gravity.BOTTOM, 0, 0);
		// setParamsView();
		// }
	}

	/**
	 * @popupwindow 初始化组件
	 */
	private void popInitView(View view) {
		ScrollView ll_popup = (ScrollView) view.findViewById(R.id.scrollView);
		ll_popup.startAnimation(AnimationUtils.loadAnimation(activity, R.anim.push_bottom_in_2));
		popupWindow.showAtLocation(pro_detail, Gravity.BOTTOM, 0, 0);

		popupWindow.setOutsideTouchable(true);
		popupWindow.update();

		iv_pronum_jian = (ImageView) view.findViewById(R.id.i_s_iv_pronum_jian);
		iv_pronum_jia = (ImageView) view.findViewById(R.id.i_s_iv_pronum_jia);
		pro_pic = (ImageView) view.findViewById(R.id.pro_pic);
		et_product_pronum = (TextView) view.findViewById(R.id.i_s_et_product_pronum);

		select_goods_params_tv = (TextView) view.findViewById(R.id.select_goods_params_tv);
		tv_stocks = (TextView) view.findViewById(R.id.tv_stocks);
		price_tv = (TextView) view.findViewById(R.id.price_tv);
		price_tv.setText(StringUtils.getFormatMoneyWithSign(goodsDatas.getStringNoNull("costPrice")));
		addShopCar = (TextView) view.findViewById(R.id.p_add_cart_tv);
		goods_params = (LinearLayout) view.findViewById(R.id.goods_params);
	}

	/**
	 * 数量文本框
	 */
	// public TextWatcher textWatcher = new TextWatcher() {
	//
	// @Override
	// public void onTextChanged(CharSequence s, int start, int before, int
	// count) {
	//
	// }
	//
	// @Override
	// public void beforeTextChanged(CharSequence s, int start, int count, int
	// after) {
	//
	// }
	//
	// @Override
	// public void afterTextChanged(Editable s) {
	// int num = Integer.parseInt(s.toString().trim());
	// if(num<=count&&num<MAX_NUM) {
	// pronum=num;
	// show();
	// }
	// }
	// };
	/**
	 * 数量加
	 */
	public OnClickListener onClickListener = new OnClickListener() {
		@Override
		public void onClick(View v) {
			if (pronum < count && pronum < MAX_NUM) {
				pronum += 1;
				show();
			}
		}
	};
	/**
	 * 数量减
	 */
	public OnClickListener jianOnClick = new OnClickListener() {
		@Override
		public void onClick(View v) {
			if (pronum > 1) {
				pronum = pronum - 1;
				show();
			}
		}
	};

	/**
	 * 数量显示
	 */
	public void show() {
		et_product_pronum.setText(pronum + "");
	}

	/**
	 * 获取商品规格的数据
	 */
	private void getProudctSpec() {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("productId", productId);
		GetDataQueue queue = new GetDataQueue();
		queue.setActionName(GetDataConfing.Action_GetProducSpec);
		queue.setParamsNoJson(params);
		queue.setCallBack(callBack);
		queue.setWhat(GetDataConfing.What_GetProductSpec);
		getDataUtil.getData(queue);
	}

	/**
	 * 设置显示选项
	 */
	private void setParamsView() {
		pips = new ArrayList<TagView>();
		goods_params.removeAllViews();
		for (JsonMap<String, Object> jsonMap1 : specifictionList) {
			View view = activity.getLayoutInflater().inflate(R.layout.layout_product_info_params, null);
			TextView tv = (TextView) view.findViewById(R.id.l_p_i_tv_pro_param);
			tv.setText(jsonMap1.getStringNoNull("specificationName"));
			ArrayList<JsonMap<String, Object>> data = (ArrayList<JsonMap<String, Object>>) jsonMap1
					.getList_JsonMap("specificationValueVos");
			TagView pipg_info = (TagView) view.findViewById(R.id.tagview);
			for (int i = 0; i < data.size(); i++) {
				JsonMap<String, Object> item = data.get(i);
				Tag tag = new Tag(item.getInt("specificationValueId"), item.getStringNoNull("specificationValue"));
				tag.background = ResourcesCompat.getDrawable(getResources(), R.drawable.cus_black_white_bt, null);
				tag.tagTextColor = R.drawable.goods_params_txt;
				tag.radius = 10f;
				// if (item.getBoolean("isChecked")) {
				// pipg_info.setSelectPosition(i);
				// }
				pipg_info.addJustTag(tag);

			}
			pipg_info.refreshView();
			pipg_info.setOnTagClickListener(new OnTagClickListener() {

				@Override
				public void onTagClick(View view, Tag tag, int position) { //
					getProudctInfoByByproidandSpec(getProductParamsSelect());
				}
			});

			goods_params.addView(view);
			pips.add(pipg_info);
		}

	}

	/**
	 * 获取商品当前选中的 商品信息
	 */
	private String getProductParamsSelect() {
		String p = "";
		for (TagView pa : pips) {
			int selectIndex = pa.getSelectPosition();
			if (selectIndex != -1) {
				Tag data_Select = pa.getTags().get(selectIndex);
				p += data_Select.id + ",";
			}
		}

		if (p.length() > 0) {
			p = p.substring(0, p.length() - 1);
		}

		return p;
	}

	/**
	 * 获取商品当前选中的 商品信息
	 */
	private String getProductParamsSelectTitle() {
		String p = "";
		for (TagView pa : pips) {
			int selectIndex = pa.getSelectPosition();
			Tag data_Select = pa.getTags().get(selectIndex);
			p += data_Select.text + ",";
		}
		if (p.length() > 0) {
			p = p.substring(0, p.length() - 1);
		}
		return "已选:" + p;
	}

	/**
	 * 获取商品规格的数据
	 */
	private void getProudctInfoByByproidandSpec(String spec) {
		int specifictionSize = specifictionList.size();
		int num = spec.split(",").length;
		if (num == specifictionSize) {
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("productId", productId);
			params.put("valueIds", spec);
			GetDataQueue queue = new GetDataQueue();
			queue.setActionName(GetDataConfing.Action_GetProductByproidandSpec);
			queue.setParamsNoJson(params);
			queue.setCallBack(callBack);
			queue.setWhat(GetDataConfing.What_GetProductByproidandSpec);
			getDataUtil.getData(queue);
		}
	}

	/**
	 * 加入购物车
	 *
	 * @param
	 */
	public void add2Cart() {
		loadingToast.show();
		loadingToast.update(R.string.add2cart_ing);
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("userId", Utils.getUserId(activity));
		params.put("productId", productId);
		params.put("productSkuId", skuId);
		params.put("productCount", String.valueOf(pronum));
		params.put("shopId", shopId);
		GetDataQueue queue = new GetDataQueue();
		queue.setActionName(GetDataConfing.GetAction_AddShoppingCart);
		queue.setParamsNoJson(params);
		queue.setCallBack(callBack);
		queue.setWhat(GetDataConfing.What_AddShoppingCart);
		getDataUtil.getData(queue);
	}

	/**
	 * 点击banck见
	 *
	 * @return
	 */
	@Override
	public boolean backKeyClick() {
		if (popupWindow != null && popupWindow.isShowing()) {
			popupWindow.dismiss();
			return false;
		} else {
			return true;
		}
	}

}