package com.yishanxiu.yishang.view;

import android.view.MotionEvent;

import android.content.Context;
import android.database.DataSetObserver;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.view.GestureDetector;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListAdapter;
import android.widget.Scroller;

import java.util.LinkedList;
import java.util.Queue;

public class HorizontalListView extends AdapterView<ListAdapter> {
    public boolean mAlwaysOverrideTouch = true;
    protected ListAdapter mAdapter;
    private int mLeftViewIndex = -1;
    private int mRightViewIndex = 0;
    protected int mCurrentX;
    protected int mNextX;
    private int mMaxX = 2147483647;
    private int mDisplayOffset = 0;
    protected Scroller mScroller;
    private GestureDetector mGesture;
    private Queue<View> mRemovedViewQueue = new LinkedList();
    private OnItemSelectedListener mOnItemSelected;
    private OnItemClickListener mOnItemClicked;
    private OnItemLongClickListener mOnItemLongClicked;
    private boolean mDataChanged = false;

    private DataSetObserver mDataObserver = new DataSetObserver() {
        public void onChanged() {
            synchronized (HorizontalListView.this) {
                HorizontalListView.this.mDataChanged = true;
            }
            HorizontalListView.this.invalidate();
            HorizontalListView.this.requestLayout();
        }

        public void onInvalidated() {
            HorizontalListView.this.reset();
            HorizontalListView.this.invalidate();
            HorizontalListView.this.requestLayout();
        }
    };

    private GestureDetector.OnGestureListener mOnGesture = new GestureDetector.SimpleOnGestureListener() {
        public boolean onDown(MotionEvent e) {
            return HorizontalListView.this.onDown(e);
        }

        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
                               float velocityY) {
            return HorizontalListView.this
                    .onFling(e1, e2, velocityX, velocityY);
        }

        public boolean onScroll(MotionEvent e1, MotionEvent e2,
                                float distanceX, float distanceY) {
            synchronized (HorizontalListView.this) {
                HorizontalListView.this.mNextX += (int) distanceX;
            }
            HorizontalListView.this.requestLayout();

            return true;
        }

        public boolean onSingleTapConfirmed(MotionEvent e) {
            for (int i = 0; i < HorizontalListView.this.getChildCount(); ++i) {
                View child = HorizontalListView.this.getChildAt(i);
                if (isEventWithinView(e, child)) {
                    if (HorizontalListView.this.mOnItemClicked != null) {
                        HorizontalListView.this.mOnItemClicked
                                .onItemClick(
                                        HorizontalListView.this,
                                        child,
                                        HorizontalListView.this.mLeftViewIndex
                                                + 1 + i,
                                        HorizontalListView.this.mAdapter
                                                .getItemId(HorizontalListView.this.mLeftViewIndex
                                                        + 1 + i));
                    }
                    if (HorizontalListView.this.mOnItemSelected == null)
                        break;
                    HorizontalListView.this.mOnItemSelected
                            .onItemSelected(
                                    HorizontalListView.this,
                                    child,
                                    HorizontalListView.this.mLeftViewIndex + 1
                                            + i,
                                    HorizontalListView.this.mAdapter
                                            .getItemId(HorizontalListView.this.mLeftViewIndex
                                                    + 1 + i));

                    break;
                }
            }

            return true;
        }

        public void onLongPress(MotionEvent e) {
            int childCount = HorizontalListView.this.getChildCount();
            for (int i = 0; i < childCount; ++i) {
                View child = HorizontalListView.this.getChildAt(i);
                if (isEventWithinView(e, child)) {
                    if (HorizontalListView.this.mOnItemLongClicked == null)
                        return;
                    HorizontalListView.this.mOnItemLongClicked
                            .onItemLongClick(
                                    HorizontalListView.this,
                                    child,
                                    HorizontalListView.this.mLeftViewIndex + 1
                                            + i,
                                    HorizontalListView.this.mAdapter
                                            .getItemId(HorizontalListView.this.mLeftViewIndex
                                                    + 1 + i));

                    return;
                }
            }
        }

        private boolean isEventWithinView(MotionEvent e, View child) {
            Rect viewRect = new Rect();
            int[] childPosition = new int[2];
            child.getLocationOnScreen(childPosition);
            int left = childPosition[0];
            int right = left + child.getWidth();
            int top = childPosition[1];
            int bottom = top + child.getHeight();
            viewRect.set(left, top, right, bottom);
            return viewRect.contains((int) e.getRawX(), (int) e.getRawY());
        }
    };

    public HorizontalListView(Context context, AttributeSet attrs) {
        super(context, attrs);
        initView();
    }

    private synchronized void initView() {
        this.mLeftViewIndex = -1;
        this.mRightViewIndex = 0;
        this.mDisplayOffset = 0;
        this.mCurrentX = 0;
        this.mNextX = 0;
        this.mMaxX = 2147483647;
        this.mScroller = new Scroller(getContext());
        this.mGesture = new GestureDetector(getContext(), this.mOnGesture);
    }

    public void setOnItemSelectedListener(
            OnItemSelectedListener listener) {
        this.mOnItemSelected = listener;
    }

    public void setOnItemClickListener(OnItemClickListener listener) {
        this.mOnItemClicked = listener;
    }

    public void setOnItemLongClickListener(
            OnItemLongClickListener listener) {
        this.mOnItemLongClicked = listener;
    }

    public ListAdapter getAdapter() {
        return this.mAdapter;
    }

    public View getSelectedView() {
        return null;
    }

    public void setAdapter(ListAdapter adapter) {
        if (this.mAdapter != null) {
            this.mAdapter.unregisterDataSetObserver(this.mDataObserver);
        }
        this.mAdapter = adapter;
        this.mAdapter.registerDataSetObserver(this.mDataObserver);
        reset();
    }

    private synchronized void reset() {
        initView();
        removeAllViewsInLayout();
        requestLayout();
    }

    public void setSelection(int position) {
    }

    private void addAndMeasureChild(View child, int viewPos) {
        LayoutParams params = child.getLayoutParams();
        if (params == null) {
            params = new LayoutParams(-1, -1);
        }

        addViewInLayout(child, viewPos, params, true);
        child.measure(
                MeasureSpec.makeMeasureSpec(getWidth(), MeasureSpec.AT_MOST),
                MeasureSpec.makeMeasureSpec(getHeight(), MeasureSpec.AT_MOST));
    }

    protected synchronized void onLayout(boolean changed, int left, int top,
                                         int right, int bottom) {
        super.onLayout(changed, left, top, right, bottom);

        if (this.mAdapter == null) {
            return;
        }

        if (this.mDataChanged) {
            int oldCurrentX = this.mCurrentX;
            initView();
            removeAllViewsInLayout();
            this.mNextX = oldCurrentX;
            this.mDataChanged = false;
        }

        if (this.mScroller.computeScrollOffset()) {
            int scrollx = this.mScroller.getCurrX();
            this.mNextX = scrollx;
        }

        if (this.mNextX <= 0) {
            this.mNextX = 0;
            this.mScroller.forceFinished(true);
        }
        if (this.mNextX >= this.mMaxX) {
            this.mNextX = this.mMaxX;
            this.mScroller.forceFinished(true);
        }

        int dx = this.mCurrentX - this.mNextX;

        removeNonVisibleItems(dx);
        fillList(dx);
        positionItems(dx);

        this.mCurrentX = this.mNextX;

        if (!this.mScroller.isFinished())
            post(new Runnable() {
                public void run() {
                    HorizontalListView.this.requestLayout();
                }
            });
    }

    private void fillList(int dx) {
        int edge = 0;
        View child = getChildAt(getChildCount() - 1);
        if (child != null) {
            edge = child.getRight();
        }
        fillListRight(edge, dx);

        edge = 0;
        child = getChildAt(0);
        if (child != null) {
            edge = child.getLeft();
        }
        fillListLeft(edge, dx);
    }

    private void fillListRight(int rightEdge, int dx) {
        while ((rightEdge + dx < getWidth())
                && (this.mRightViewIndex < this.mAdapter.getCount())) {
            View child = this.mAdapter.getView(this.mRightViewIndex,
                    this.mRemovedViewQueue.poll(), this);
            addAndMeasureChild(child, -1);
            rightEdge += child.getMeasuredWidth();

            if (this.mRightViewIndex == this.mAdapter.getCount() - 1) {
                this.mMaxX = (this.mCurrentX + rightEdge - getWidth());
            }

            if (this.mMaxX < 0) {
                this.mMaxX = 0;
            }
            this.mRightViewIndex += 1;
        }
    }

    private void fillListLeft(int leftEdge, int dx) {
        while ((leftEdge + dx > 0) && (this.mLeftViewIndex >= 0)) {
            View child = this.mAdapter.getView(this.mLeftViewIndex,
                    this.mRemovedViewQueue.poll(), this);
            addAndMeasureChild(child, 0);
            leftEdge -= child.getMeasuredWidth();
            this.mLeftViewIndex -= 1;
            this.mDisplayOffset -= child.getMeasuredWidth();
        }
    }

    private void removeNonVisibleItems(int dx) {
        View child = getChildAt(0);
        while ((child != null) && (child.getRight() + dx <= 0)) {
            this.mDisplayOffset += child.getMeasuredWidth();
            this.mRemovedViewQueue.offer(child);
            removeViewInLayout(child);
            this.mLeftViewIndex += 1;
            child = getChildAt(0);
        }

        child = getChildAt(getChildCount() - 1);
        while ((child != null) && (child.getLeft() + dx >= getWidth())) {
            this.mRemovedViewQueue.offer(child);
            removeViewInLayout(child);
            this.mRightViewIndex -= 1;
            child = getChildAt(getChildCount() - 1);
        }
    }

    private void positionItems(int dx) {
        if (getChildCount() > 0) {
            this.mDisplayOffset += dx;
            int left = this.mDisplayOffset;
            for (int i = 0; i < getChildCount(); ++i) {
                View child = getChildAt(i);
                int childWidth = child.getMeasuredWidth();
                child.layout(left, 0, left + childWidth,
                        child.getMeasuredHeight());
                left += childWidth;
            }
        }
    }

    public synchronized void scrollTo(int x) {
        this.mScroller.startScroll(this.mNextX, 0, x - this.mNextX, 0);
        requestLayout();
    }

    public boolean dispatchTouchEvent(MotionEvent ev) {
        boolean handled = super.dispatchTouchEvent(ev);
        handled |= this.mGesture.onTouchEvent(ev);
        return handled;
    }

    protected boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
                              float velocityY) {
        synchronized (this) {
            this.mScroller.fling(this.mNextX, 0, (int) (-velocityX), 0, 0,
                    this.mMaxX, 0, 0);
        }
        requestLayout();

        return true;
    }

    protected boolean onDown(MotionEvent e) {
        this.mScroller.forceFinished(true);
        return true;
    }
}
