package com.yishanxiu.yishang.activity;

import android.content.Context;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.text.TextUtils;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;
import cn.jpush.android.api.TagAliasCallback;
import com.hyphenate.EMCallBack;
import com.hyphenate.chat.EMClient;
import com.hyphenate.exceptions.HyphenateException;
import com.yishanxiu.yishang.utils.LogUtil;
import net.tsz.afinal.json.JsonMap;
import net.tsz.afinal.json.JsonParseHelper;
import cn.jpush.android.api.JPushInterface;
import net.tsz.afinal.annotation.view.ViewInject;
import com.yishanxiu.yishang.R;
import com.yishanxiu.yishang.activity.base.BaseUIActivity;
import com.yishanxiu.yishang.getdata.*;
import com.yishanxiu.yishang.utils.StringUtils;
import com.yishanxiu.yishang.utils.Utils;

import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

/**
 * Created by Administrator on 2015/8/31.
 */
public class RegisterActivity extends BaseUIActivity {
	/**
	 * 注册
	 */
	@ViewInject(id = R.id.user_register_bt, click = "register_bt_click")
	private TextView user_register_bt;
	/**
	 * 输入账号
	 */
	@ViewInject(id = R.id.user_account_ed)
	private EditText user_account_ed;
	/**
	 * 请输入验证码
	 */
	@ViewInject(id = R.id.user_code_ed)
	private EditText user_code_ed;
	/**
	 * 请输入邮箱
	 */
	@ViewInject(id = R.id.user_nickname_ed)
	private EditText user_nickname_ed;
	/**
	 * 请输入密码
	 */
	@ViewInject(id = R.id.user_pwd_ed)
	private EditText user_pwd_ed;


	/**
	 * 发送验证码
	 */
	@ViewInject(id = R.id.btn_send_code, click = "send_code_click")
	private TextView btn_send_code;
	private String userPhone;
	private String code;  //验证码
	private TimeCount time; //定时器
	private String passWord;
	private String userNickname;//nicheng

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_user_register);
		setCenter_title(R.string.register);
		setBtn_menuText(R.string.cancel, new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				finish();
			}
		});
		time = new TimeCount(60000, 1000);
	}

	/**
	 * 获取验证码（防止网络延时发送多条验证码）
	 */
	public void send_code_click(View view) {
		if (judgeMobileNo()) {
			getData_UserSendCode();
		}
	}


	/**
	 * 调用发送验证码接口    { "userPhone":18516696739, "userTypeId":1, "serviceType":0 }
	 */
	private void getData_UserSendCode() {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("userPhone", userPhone);
		params.put("userTypeId", String.valueOf(0));
		params.put("serviceType", String.valueOf(0));
		GetDataQueue queue = new GetDataQueue();
		queue.setCallBack(callBack);
		queue.setActionName(GetDataConfing.GetAction_GetCode);
		queue.setWhat(GetDataConfing.What_GetCode);
		queue.setParamsNoJson(params);
		getDataUtil.getData(queue);
	}


	/**
	 * 数据回调
	 */
	private IGetServicesDataCallBack callBack = new IGetServicesDataCallBack() {
		@Override
		public void onLoaded(GetDataQueue entity) {
			loadingToast.dismiss();
			if (entity.isOk()) {
				if (ShowGetDataError.isCodeSuccess(mContext, entity.getInfo())) {
					if (entity.getWhat() == GetDataConfing.What_GetCode) {
						JsonMap<String, Object> data = JsonParseHelper.getJsonMap(entity.getInfo());
						toast.showToast(data.getStringNoNull(JsonKeys.Key_Msg));
						time.start();
						btn_send_code.setEnabled(false);
					} else if (entity.getWhat() == GetDataConfing.what_CheckRegister) {
						toast.showToast(R.string.regisger_success);
						JsonMap<String, Object> data = JsonParseHelper.getJsonMap_JsonMap(entity.getInfo(), JsonKeys.Key_Info);
						initHx(data);
						Utils.saveUserInfos(mContext, data);
						bindUser(mContext);
						setResult(RESULT_OK);
						finish();

					}
				}
			} else {
				ShowGetDataError.showNetError(mContext);
			}

		}
	};

	//初始化环信
	private void initHx(final JsonMap<String, Object> dataInfo) {
		final String chatId=dataInfo.getStringNoNull("chatId") ;
		final String chatPwd=dataInfo.getStringNoNull("chatPwd");
		if(!TextUtils.isEmpty(chatId)&&!TextUtils.isEmpty(chatPwd)) {
			EMClient.getInstance().login(chatId, chatPwd, new EMCallBack() {// 回调
				@Override
				public void onSuccess() {
					EMClient.getInstance().groupManager().loadAllGroups();
					EMClient.getInstance().chatManager().loadAllConversations();
					LogUtil.d(TAG, "登录聊天服务器成功！");
				}

				@Override
				public void onProgress(int progress, String status) {

				}

				@Override
				public void onError(int code, String message) {
					LogUtil.d(TAG, "登录聊天服务器失败！");
				}
			});
		} else {
			new Thread(new Runnable() {
				@Override
				public void run() {
					String userId=dataInfo.getStringNoNull("userId");
					try {
						EMClient.getInstance().createAccount(userId,"Essential"+userId);
						modifyInfo("8",userId,"Essential"+userId);
					} catch (HyphenateException e) {
						e.printStackTrace();
					}
					EMClient.getInstance().login(userId, "Essential"+userId, new EMCallBack() {// 回调
						@Override
						public void onSuccess() {
							EMClient.getInstance().groupManager().loadAllGroups();
							EMClient.getInstance().chatManager().loadAllConversations();
							LogUtil.d(TAG, "登录聊天服务器成功！");
						}

						@Override
						public void onProgress(int progress, String status) {

						}

						@Override
						public void onError(int code, String message) {
							LogUtil.d(TAG, "登录聊天服务器失败！");
						}
					});
					Utils.setChatIdAndPwd(mContext,userId,"Essential"+userId);
				}
			}).start();
		}
	}

	private void modifyInfo(String requestType, String chatId, String chatPwd) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("requestType", requestType);
		params.put("userId", Utils.getUserId(mContext));
		params.put("chatId", chatId);
		params.put("chatPwd",chatPwd);

		GetDataQueue queue = new GetDataQueue();
		queue.setCallBack(updateInfoCallBack);
		queue.setActionName(GetDataConfing.UserInfo_ModUserBaseInfo);
		queue.setWhat(GetDataConfing.What_UserInfo_ModUserBaseInfo);
		queue.setParamsNoJson(params);
		getDataUtil.getData(queue);
	}
	private IGetServicesDataCallBack updateInfoCallBack = new IGetServicesDataCallBack() {
		@Override
		public void onLoaded(GetDataQueue entity) {
		}
	};


	private void bindUser(Context context) {
		Set<String> tagSet = new LinkedHashSet<String>();
		tagSet.add(Utils.getUserLevel(context) + "");
		JPushInterface.setAlias(context, Utils.getUserId(context).toString(), new TagAliasCallback() {
			@Override
			public void gotResult(int i, String s, Set<String> set) {
				LogUtil.d(TAG, "" + s);
			}
		});
		JPushInterface.setTags(context, tagSet, new TagAliasCallback() {
			@Override
			public void gotResult(int i, String s, Set<String> set) {
				LogUtil.d(TAG, "" + s);
			}
		});
	}

	/**
	 * 判断手机号码
	 */
	public boolean judgeMobileNo() {
		userPhone = user_account_ed.getText().toString();
		if (TextUtils.isEmpty(userPhone)) {
			//手机号码为空的情况
			toast.showToast(R.string.register_name_null);
			return false;
		} else if (!StringUtils.isMobileNO(userPhone)) {
			toast.showToast(R.string.phone_formal_error);
			return false;
		}
		return true;
	}

	//验证码倒计时
	class TimeCount extends CountDownTimer {
		public TimeCount(long millisInFuture, long countDownInterval) {
			//参数依次为总时长,和计时的时间间隔
			super(millisInFuture, countDownInterval);
		}

		@Override
		public void onFinish() {
			//计时完毕时触发
			btn_send_code.setText(getString(R.string.revalidation));
			code = "";
			btn_send_code.setEnabled(true);
		}

		@Override
		public void onTick(long millisUntilFinished) {//计时过程显示
			btn_send_code.setText(millisUntilFinished / 1000 + getString(R.string.second));
		}
	}

	public void register_bt_click(View view) {
		if (registerJudge()) {
			getData_UserSubmitCode();
		}
	}

	/**
	 * 注册提交    {
	 * "userName":"18516696738",
	 * "userPwd":"123456",
	 * "userNickname":"Jaelyn",
	 * "smsCode":"124568"
	 * }
	 */
	private void getData_UserSubmitCode() {
		loadingToast.show();
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("userName", userPhone);
		params.put("userPwd", passWord);
		params.put("userNickname", userNickname);
		params.put("smsCode", code);
		GetDataQueue queue = new GetDataQueue();
		queue.setCallBack(callBack);
		queue.setActionName(GetDataConfing.GetAction_CheckRegister);
		queue.setWhat(GetDataConfing.what_CheckRegister);
		queue.setMediaType(GetDataQueue.MediaType.JSON);
		queue.setParamsNoJson(params);
		getDataUtil.getData(queue);
	}


	/**
	 * 注册的判断
	 */

	public boolean registerJudge() {
		code = user_code_ed.getText().toString();
		passWord = user_pwd_ed.getText().toString();
		userNickname = user_nickname_ed.getText().toString();
		if (!judgeMobileNo()) {
			return false;
		}
		if (TextUtils.isEmpty(code)) {
			toast.showToast(R.string.pls_input_code);
			return false;
		}
		if (TextUtils.isEmpty(passWord)) {
			toast.showToast(R.string.register_password_null);
			return false;
		} else {
			if (!isPasswordAuthentication(passWord)) {
				return false;
			}
		}
		if (TextUtils.isEmpty(userNickname)) {
			toast.showToast(R.string.nickname_null);
			return false;
		}
		return true;
	}

	/**
	 * 密码判断
	 */
	public boolean isPasswordAuthentication(String password) {
		if (!StringUtils.passwordAuthenticationLength(password)) {
			toast.showToast(R.string.register_passwordRule);
			return false;
		} else if (!StringUtils.passwordAuthentication(password)) {
			toast.showToast(R.string.password_format_error);
			return false;
		}
		return true;
	}
}
