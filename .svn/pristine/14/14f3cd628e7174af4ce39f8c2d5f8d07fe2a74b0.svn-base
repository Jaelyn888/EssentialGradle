package com.yishanxiu.yishang.app;

import java.io.File;;
import com.hyphenate.chat.EMOptions;
import com.hyphenate.easeui.controller.EaseUI;
import com.lzy.okhttputils.OkHttpUtils;
import com.lzy.okhttputils.cookie.CookieJarImpl;
import com.lzy.okhttputils.cookie.store.PersistentCookieStore;
import com.lzy.okhttputils.interceptor.LoggerInterceptor;
import com.lzy.okhttputils.model.HttpHeaders;
import com.yishanxiu.yishang.getdata.GetServicesDataUtil;
import com.yishanxiu.yishang.utils.*;

import android.annotation.SuppressLint;
import android.app.Application;
import android.content.Context;
import android.support.multidex.MultiDexApplication;

import cn.jpush.android.api.JPushInterface;

/**
 * Created by Administrator on 2015/8/17 0017.
 */
public class MyApplication extends MultiDexApplication {
	private static MyApplication mInstance = null;

	private int screenWidth;// 屏幕的宽度
	private int screenHeight;
	private float density;

	public float getScreenDensity() {
		return density;
	}

	public void setScreenDensity(float density) {
		this.density = density;
	}

	/**
	 * 调用服务器接口获取服务器数据的工具
	 */
	protected GetServicesDataUtil getDataUtil;

	public GetServicesDataUtil getGetDataUtil() {
		return getDataUtil;
	}

	public int getScreenWidth() {
		return screenWidth;
	}

	/**
	 * 返回屏幕的宽度 数据在
	 *
	 * @param screenWidth
	 */
	public void setScreenWidth(int screenWidth) {
		this.screenWidth = screenWidth;
	}

	public void setScreenHeight(int screenHeight) {
		this.screenHeight = screenHeight;
	}

	public int getScreenHeight() {
		return screenHeight;
	}

	public static MyApplication getInstance() {
		if (mInstance == null) {
			mInstance = new MyApplication();
		}
		return mInstance;
	}

	/**
	 * 购物车商品数量
	 */
	private int shopcart_num = 0;

	public int getShopcart_num() {
		return shopcart_num;
	}

	public void setShopcart_num(int shopcart_num) {
		this.shopcart_num = shopcart_num;
	}

	public void addShopCartNum() {
		shopcart_num++;
	}

	@Override
	public void onCreate() {
		super.onCreate();
		mInstance = this;
		if (LogUtil.isDebug) {
			MyCrashHandler crashHandler = MyCrashHandler.getInstance();
			crashHandler.init(getApplicationContext());
		}

		initHttp();
		JPushInterface.init(this);

		ShareSocialUtils.init();
		Constant.productChachePath = getExternalCacheDir().getAbsolutePath() + File.separator;
		// --------------------初始化环信聊天SDK--------------------------------------------------------------
		initChart(getApplicationContext());
		// ------------------------end------------------------------------------------------------------------
	}

	private void initHttp() {
		HttpHeaders headers = new HttpHeaders();
		headers.put("User-Agent", "Android"); // header不支持中文
		// 必须调用初始化
		try {
			OkHttpUtils.init(this);
			OkHttpUtils.getInstance()
					// 如果使用默认的 60秒,以下三行不需要传
					.setConnectTimeout(30 * 1000) // 全局的连接超时时间
					.setReadTimeOut(30 * 1000) // 全局的读取超时时间
					.setWriteTimeOut(OkHttpUtils.DEFAULT_MILLISECONDS) // 全局的写入超时时间
					// .setCookieStore(new MemoryCookieStore())
					// //cookie使用内存缓存（app退出后，cookie消失）
					.setCookieStore(new PersistentCookieStore()) // cookie持久化存储，如果cookie不过期，则一直有效
					.addCommonHeaders(headers); // 设置全局公共参数
			if (LogUtil.isDebug) {
				OkHttpUtils.getInstance().debug("httpUtils");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		getDataUtil = GetServicesDataUtil.init();
	}

	private void initChart(Context mInstance) {
		EMOptions options = new EMOptions();
		// 默认添加好友时，是不需要验证的，改成需要验证
		options.setAcceptInvitationAlways(false);
		EaseUI.getInstance().init(mInstance, options);
	}

	@SuppressLint("NewApi")
	@Override
	public void onTrimMemory(int level) {
		super.onTrimMemory(level);
		LogUtil.d("memory onTrimMemory", level + "");
	}

}
